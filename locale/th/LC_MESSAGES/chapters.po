# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2017, Paul Vincent Craven
# This file is distributed under the same license as the Arcade package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2017.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Arcade Spring 2017\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2017-08-11 09:21-0500\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.4.0\n"

#: ../../source/chapters/00_foreword/foreword.rst:2
msgid "Foreword - Why Learn Programming?"
msgstr ""

#: ../../source/chapters/00_foreword/foreword.rst:4
msgid ""
"The goal of this class is to take learn how to create 2D video games. As "
"a bonus, we'll be learning all the standard topics of first-semester "
"college course along the way."
msgstr ""

#: ../../source/chapters/00_foreword/foreword.rst:8
msgid ""
"We'll create our first graphics in Chapter 2. Chapter 1 is about getting "
"your system set up, understanding a few important concepts, and learning "
"how to manage your code with the same systems that you'll find "
"professional programmers using."
msgstr ""

#: ../../source/chapters/00_foreword/foreword.rst:13
msgid ""
"You can earn a lot of money by programming. There are so many cool things"
" you can create. It is a fun career, hobby, or passion. It is also a lot "
"of fun to get started."
msgstr ""

#: ../../source/chapters/00_foreword/foreword.rst:17
msgid ""
"Here are some videos of games students have created in prior semesters. "
"Next year I'll add your games to the wall of fame:"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:4
msgid "Understanding and Setting Up Your System"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:6
msgid ""
"Before you begin, you need to install a few things on the computer. Using"
" a school computer? You may have these already installed. Yay! Still, "
"read through this part. Make sure you know how the computer is setup up."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:11
msgid ""
"When something goes wrong, you need to understand how your system is set "
"up. Avoid frustration later. Learn it now."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:14
msgid "Your development computer will need:"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:16
msgid "The Python_ programming language and the Arcade_ code library."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:17
msgid ""
"An editor to type in your programs. (We'll use a programm called "
"PyCharm_. You can get a `student license`_ for free.)"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:19
msgid ""
"A version control system to track and turn in your work. "
"(Git/SourceTree_/BitBucket_)"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:20
msgid "A minor configuration tweak so we can see file extensions."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:22
msgid "Let's go through these four items in detail."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:32
msgid "The Python Programming Language"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:37
msgid ""
"We will be using the \"Python_\" computer programming language. The "
"creator of Python was a fan of `Monty Python`_, hence the name."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:42
msgid ""
"What is a programming language? This wouldn't be much of a programming "
"course if you left without even knowing what a programming language was! "
"So let's get that out of the way."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:47
msgid "What is a Programming Language?"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:49
msgid ""
"Computers have a Central Processing Unit (CPU_) that are the main "
"\"brains\" of the computer. For example, you might have an Intel i7 or an"
" AMD-FX in your computer."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:52
msgid ""
"The CPU gets its instructions by reading a set of numbers. For example "
"the number \"04\" might be an instruction to add two other numbers "
"together."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:55
msgid ""
"Everything stored on the computer is in the form of numbers. Some numbers"
" computers store are for data (text, photos, movies), and some are "
"computer instructions."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:62
msgid "Machine Code"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:64
msgid ""
"In the early days of computing, this is how people coded programs. Just "
"punch in numbers that represent computer instructions. Then punch in "
"data."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:67
msgid ""
"We call these numbers that are instructions `machine code`_. Note that "
"not all numbers on the computer are machine code (they might just be "
"data), but all machine code is made of numbers. Machine code is also "
"called a `First Generation Language`_ (1GL)."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:72
msgid ""
"Below is an image of the `Altair 8800`_, the first personal computer that"
" regular people could buy. Notice that it is missing a monitor and a "
"keyboard! The first computers loaded the instructions by flipping "
"switches. A pattern of switches represented a machine instruction. So "
"you'd flip lots of switches, then flip the \"Run\" switch. And the lights"
" would blink."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:81
msgid ""
"Source: `Wikipedia: Altair 8800 "
"<https://commons.wikimedia.org/wiki/File:Altair_8800,_Smithsonian_Museum.jpg>`_"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:83
msgid ""
"While this may not seem very useful (and quite frankly, it wasn't) it was"
" very popular in the hobbyist community. Those people saw the potential."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:86
msgid ""
"Computers *still* run on machine code. You can still code by punching in "
"numbers if you want. But you'd be crazy because hand-coding these numbers"
" is *so* tedious. There's something better. Assembly Language."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:96
msgid "Assembly Language"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:98
msgid ""
"In order to make things easier, computer scientists came up with "
"something called `assembly language`_. Assembly language is a `Second "
"Generation Language`_ (2GL). Assembly language looks like this:"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:109
msgid ""
"Source: `Wikipedia: Motorola 6800 Assembly Language "
"<https://en.wikipedia.org/wiki/File:Motorola_6800_Assembly_Language.png>`_"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:111
msgid "Don't worry! We aren't coding in assembly language for this class."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:113
msgid ""
"Assembly language allows a programmer to edit a file and type in codes "
"like ``LDA`` which stands for \"Load Accumulator Immediate.\" The "
"programmer types these commands into a **source file**. We call the "
"commands `source code`_. The computer can't run the source code as-is. "
"The programmer runs a `compiler`_ that simply translates the computer "
"commands like ``LDA`` into the corresponding number of the machine "
"language instruction."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:124
msgid ""
"After I compile the source code into compiled code, I can run the "
"compiled code. I can give the compiled code to someone else and they can "
"run it. They do not need the source code or the compiler."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:129
msgid ""
"Assembly language is an improvement over machine language. But it isn't "
"*that* much of an improvement. Why? Assembly language instructions are "
"very low-level. There are no commands like \"draw a building here.\" Or "
"even \"print hi.\" There are only mind-numbingly simple commands that "
"move bits from one spot to another, add them, and shift them."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:137
msgid "Third Generation Languages"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:142
msgid ""
"Source: `Wikipedia Grace Hopper and UNIVAC "
"<https://en.wikipedia.org/wiki/Grace_Hopper#/media/File:Grace_Hopper_and_UNIVAC.jpg>`_"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:144
msgid ""
"`Third Generation Languages`_ (3GL) started with `Grace Hopper`_ creating"
" the language COBOL_. There are many, many different third generation "
"languages now. These languages often specialize at certain tasks. For "
"example, the language C_ is great at creating small, fast programs that "
"can run on minimal hardware. PHP_ is an easy-to-use language that can "
"build websites."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:156
msgid "Third generation languages usually fall into one of three categories."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:158
msgid ""
"**Compiled:** The computer takes the original source code, and uses a "
"*compiler* to translate it to machine code. The user then run the machine"
" code. The original source code is not needed to run the program. \"C\" "
"is an example of a language that works this way. So is the 2GL assembly "
"language we just talked about."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:163
msgid ""
"**Interpreted:** The computer looks at the source code and immediately "
"translates it to machine code. The compile step is not needed, but the "
"user needs both the source code and an interpreter to run the program. "
"Python is an example of an interpreted language."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:167
msgid ""
"**Runtime Environment:** Languages such as Java and C# take source code, "
"and compile the source code to a machine language. But not the language "
"of your actual machine, they compile to a *virtual* machine. This is a "
"separate program that acts as a layer between the real machine and the "
"compiled code. This allows for better security, portability, and memory "
"management."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:173
msgid ""
"Working with a compiled language is like taking a book in Spanish and "
"translating it to English. You no longer need the Spanish book, and you "
"don't need the translator. However, if you want to edit or change the "
"book you have to re-translate everything."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:178
msgid ""
"Working with an interpreted language is like working with a interpreter. "
"You can communicate back and forth with a person that knows both English "
"and Spanish. You need the original Spanish, the English, and the "
"interpreter. It is easier to make ad-hoc changes and carry out a dialog. "
"Interpreters often help prevent computers from running commands that will"
" cause major crashes or common security issues. Kind of like having a "
"human interpreter that says, \"You don't *really* want to say that.\""
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:186
msgid ""
"Using a runtime environment is hard to explain in human terms. It is a "
"hybrid of the two system. You need source code. You need a compiler. "
"Instead of the compiler making machine code, it makes for for a **virtual"
" machine**."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:191
msgid "What is so great about Python?"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:193
msgid ""
"Python is a great language to start programming in. Python is a Top-5 "
"language in popularity according to the `TIOBE Index "
"<http://www.tiobe.com/tiobe-index/>`_. While may be less popular than "
"Java, it is easier to read and learn. Less work is required to do "
"graphics. And everything you learn in Python you can also apply when you "
"learn `C#`_ or Java_."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:205
msgid ""
"Python a great language for people interested in doing data processing "
"and `automating boring things <https://automatetheboringstuff.com/>`_."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:209
msgid "Python 2.7 vs. Python 3.6"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:211
msgid ""
"There are two main versions of Python. When Python moved to version 3, "
"there were changes that didn't work with all the currently written Python"
" 2 programs. So both Python 2 and Python 3 were being developed "
"simultaneously. Some people don't want to move to Python 3 at all."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:216
msgid "We use Python 3. Why are you going to care?"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:218
msgid ""
"If you search up examples you will find both Python 2 and Python 3 "
"examples."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:219
msgid "Systems such as the Mac and Linux have Python 2 installed by default."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:221
msgid ""
"If you see a Python example on the web that has a print statement that "
"looks like::"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:226
msgid "Instead of::"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:230
msgid ""
"Then you have a Python 2 example and it won't run with what we install "
"and use in this class."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:233
msgid ""
"In the case of the Mac and Linux, it will be important to use Python 3 "
"and not Python 2. Since Python 2 is installed by default, it can be a bit"
" of a hassle to make sure they use Python 3."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:238
msgid "Setup the Programming Environment"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:240
msgid ""
"In addition to the Python language, we are going to use a library of "
"commands for drawing on the screen. This is called the \"Arcade\" "
"library."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:243
msgid ""
"Installation for installing Python and the Arcade library are available "
"below:"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:245
msgid ""
"`Windows Installation <http://arcade.academy/installation_windows.html>`_"
" (Make sure to read the instructions carefully. Do not skip the \"Add "
"Python to Path\" step. This seems to be the most frequent issue.)"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:248
msgid "`Mac Installation <http://arcade.academy/installation_mac.html>`_"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:249
msgid "`Linux Installation <http://arcade.academy/installation_linux.html>`_"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:251
msgid ""
"We also need an editor. Python comes with an editor called IDLE, but it "
"is awful and not worth using. We'll use an editor called PyCharm."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:254
msgid ""
"Download and install PyCharm_. You'll need a license to use PyCharm. They"
" are free for educational use. See your instructor for how to get a "
"PyCharm license, or if you have an e-mail that ends in ``.edu`` you can "
"ask for a `student license`_. It can be used on a school computer, or on "
"your own computer."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:265
msgid "Setup the Distributed Version Control System"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:267
msgid "Download and install SourceTree_."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:271
msgid ""
"No serious development should be done without version control. In fact, "
"version control is so important, many developers would argue that almost "
"no development should be done without version control. Even all my notes "
"for class I keep in version control."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:276
msgid "Version control allows developers to:"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:278
msgid "Get any prior version of a project."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:280
msgid ""
"Released version 1.5 of your program, and now it is crashing? Quick! Go "
"back to version 1.4."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:282
msgid "Did the 'new guy' mess up the project? Revert back!"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:284
msgid ""
"Know exactly what changed in the code, when, and by who. See who is "
"actually doing the work. If a mistake gets added in, see when it was "
"added and by whom."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:286
msgid "Easily share code between developers."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:287
msgid "Easily work independently of other developers."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:288
msgid "Recover an accidentally deleted or overwritten file."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:289
msgid "Go back and create a bug-fix release on prior versions of a program."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:290
msgid "Work on multiple computers and keep files in sync."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:292
msgid ""
"Version control saves untold time and headaches. It used to be that "
"version control had enough of a learning curve that some developers "
"refused to use it. Thankfully today's version control tools are so easy "
"to use there's no excuse not to."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:296
msgid ""
"There are two main types of version control. The original version control"
" systems were \"centralized.\" Subversion_ (SVN) is a very popular piece "
"of software that supports this type of version control. The other type is"
" a \"Distributed Version Control Systems\" (DVCS). There are two popular "
"versions of DVCS in use today, Git_ and Mercurial_. Mercurial is "
"sometimes also known as Hg. Get it? Hg is the symbol for Mercury. Either "
"Git or Hg works fine, but for this tutorial we will standardize on Git."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:309
msgid "Viewing File Extensions"
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:310
msgid ""
"It is a great idea to change your windows configuration to show file "
"extensions. A file usually has a name like Book ``report.docx`` where the"
" ``.docx`` tells the computer it is a Microsoft Word compatible document."
" By default Windows hides the ``.docx`` extension if there is a program "
"installed to handle it. If you are programming, this hiding part of the "
"file name can be annoying."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:320
msgid ""
"For Windows 7, to show file extensions, open up your computer's control "
"panel. Find the selection for \"Folder Options.\"\" Click the \"View\" "
"tab, and then unselect the option for \"Hide extensions for known file "
"types.\"\""
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:325
msgid ""
"For Windows 8 and 10, bring up a file explorer by hitting the Windows-E "
"key. Then click the \"view\" tab and make sure “File name extensions” has"
" been checked."
msgstr ""

#: ../../source/chapters/01_setup/setup.rst:328
msgid "Great! Now let's make our first program with :ref:`lab-01`."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:5
msgid "How to Draw with Your Computer"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:7
msgid ""
"By the end of this chapter, you should know how to write programs that "
"will draw images on the screen. Below is an example of what one student "
"did:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:13
msgid "Creating a New Program"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:15
msgid ""
"Open up PyCharm to the same ``CMSC 150`` project we created earlier. "
"We'll use it for all our work this semester."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:18
msgid ""
"We are going to create a lot of code samples as we go through the "
"chapters. Let's create a directory in our project for these samples, away"
" from the labs. Call it ``Code Samples``. Then create a Python source "
"file for this chapter called ``drawing_samples.py``. Your system should "
"look like this:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:26
msgid "Comments"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:28
msgid ""
"Before we begin learning to draw, we need to learn about **comments** in "
"code. When typing in computer code, sometimes we want to be able to write"
" things that the computer ignores. We call this \"commenting our code.\" "
"You will see a lot of comments in my code examples to explain how they "
"work."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:33
msgid ""
"Below are two ways of adding comments to code in the Python computer "
"language:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:39
msgid ""
"Go ahead and try it. Multi-line comments usually start each source file "
"and explain what the code does."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:42
msgid ""
"Let's try running the program. But before we run the program, we need to "
"make sure we are running the *right* program. Look at the image below. If"
" I select \"run\" with the green arrow, I will run ``lab_01.py``, *not* "
"the program I want to run. You need to right-click on our program and "
"select \"Run 'drawing_sample.py'\" instead."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:50
msgid ""
"Hey! When we run the program, nothing happens. That's because the only "
"code that we wrote were \"comments.\" Comments are ignored. Therefore, "
"there was nothing for the computer to do."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:55
msgid "Import the Arcade Library"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:57
msgid ""
"Before we can draw anything, we need to import a \"library\" of code that"
" has commands for drawing."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:60
msgid ""
"Computer languages come with a set of built-in commands. Most programs "
"will require more commands than what the computer language loads by "
"default. These sets of commands are called **libraries**. Some languages "
"have their own special term for these libraries. In the case of Python, "
"they are called **modules**."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:65
msgid ""
"Thankfully, it is easy to import a library of code. If we want to use the"
" \"arcade\" library, all we need to do is add ``import arcade`` at the "
"top of our program."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:70
msgid ""
"Libraries should always be imported at the **top** of your program. Only "
"comments should appear ahead of an ``import`` statement."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:73
msgid ""
"Technically, you can import libraries elsewhere in your code, as long as "
"they occur before the library is called. But don't. Only import the "
"library at the top of your program. The only thing that could be ahead of"
" an ``import`` statement would be comments."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:79
msgid ""
"In the code below, we've imported the arcade library. If you run the "
"code, nothing will happen. We've asked to load the arcade library, but we"
" haven't done anything with it yet."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:89
msgid "How to Open a Window for Drawing"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:91
msgid "Now it is time to open the window. See the command below:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:95
msgid ""
"How does this command work? To begin, we select the arcade library with "
"``arcade``. Then we separate the library from the function we want to "
"call with a period: ``.`` Next, we put in the function. Which happens to "
"be ``open_window``. Commands that we can run are called **functions**."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:102
msgid "Commands that we can run are called **functions**."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:104
msgid ""
"Just like the sine and cosine functions in math, we surround the function"
" **parameters** with parenthesis. ``my_function(parameters)`` The data we"
" need to pass the function are the parameters. In this case, we want to "
"give the command the text that will appear on the title bar. There are "
"two more parameters that specify the width and height of the window "
"drawing surface in pixels. Since the numbers specify the part of the "
"window you can draw on, the actual window is larger to accomidate the "
"title bar and borders. So a 600x600 window is really 602x632 if you count"
" the title bar and borders."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:113
msgid ""
"Wait, how do we know that it was the ``open_window`` function to call? "
"How did we know what parameters to use? The names of the functions, the "
"order of the parameters, is the **Application Program Interface** or "
"\"API\" for short. You can click here for the `Arcade API`_. Any decent "
"code library will have an API and documentation you can find on the web."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:121
msgid "Below is an example program that will open up a window:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:128
msgid ""
"Try running the code above. It kind-of works. If you have fast eyes, and "
"a slow computer you might see the window pop open, then immediately "
"close. If your computer is fast, you won't see anything at all because "
"the window closes too fast. Why does it close? Because our program is "
"done! We've ran out of code to execute."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:135
msgid ""
"To keep the window open, we need to pause until the user hits the close "
"button. To do this, we'll use the ``run`` command in the Arcade library. "
"The ``run`` command takes no parameters, but even if a function doesn't "
"take parameters, you still need to use parenthesis."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:145
msgid "You should get a window that looks something like this:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:152
msgid "Clearing the screen"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:154
msgid ""
"Right now we just have a default white as our background. How do we get a"
" different color? Use the ``set_background_color`` command."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:157
msgid ""
"But by itself, the function doesn't work. You need a two more commands. "
"These tell the Arcade library when you are about to start drawing "
"(``start_render``), and when you are done drawing (``finish_render``)."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:161
msgid "See below:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:170
msgid "Specifying Colors"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:172
msgid ""
"Wait, where did ``AIR_SUPERIORITY_BLUE`` come from? How do I get to "
"choose the color I want? There are two ways to specify colors:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:175
msgid "Look at the `arcade.color API documentation`_ and specify by name."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:176
msgid "Specify the RGB or RGBA color."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:178
msgid ""
"To specify colors by name, you can look at the color API documentation "
"and use something like ``arcade.color.AQUAMARINE`` in your program. Then "
"color names come from the ColorPicker `color chart`_."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:182
msgid ""
"If the color you want isn't in the chart, or you just don't want to use "
"that chart, you can specify colors by \"RGB\". RGB stands for Red, Green,"
" and Blue."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:186
msgid ""
"Computers, TVs, color changing LEDs, all work by having three small "
"lights close together. A red light, a green light, and a blue light. Turn"
" all three lights off and you get black. Turn all three lights on and you"
" get white. Just turn on the red, and you get red. Turn on both red and "
"green to get yellow."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:192
msgid ""
"RGB based monitors work on an *additive* process. You start with black "
"and add light to get color."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:195
msgid ""
"This is different than paint or ink, which works on a *subtractive* "
"process. You start with white and add to get darker colors."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:199
msgid ""
"Therefore, keep separate in your mind how light-based RGB color works "
"from how paint and ink works."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:202
msgid ""
"We specify how much red, green, and blue to use using numbers. No light "
"is zero. Turn the light on all the way and it is 255. So ``(0, 0, 0)`` "
"means no red, no green, no blue. Black. Here are some other examples:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:207
#: ../../source/chapters/02_drawing/drawing.rst:212
msgid "Red"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:207
#: ../../source/chapters/02_drawing/drawing.rst:213
msgid "Green"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:207
#: ../../source/chapters/02_drawing/drawing.rst:214
msgid "Blue"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:207
msgid "Color"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:209
#: ../../source/chapters/02_drawing/drawing.rst:212
#: ../../source/chapters/02_drawing/drawing.rst:213
#: ../../source/chapters/02_drawing/drawing.rst:214
#: ../../source/chapters/02_drawing/drawing.rst:215
#: ../../source/chapters/02_drawing/drawing.rst:261
#: ../../source/chapters/07_lists/lists.rst:543
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:31
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:33
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:35
msgid "0"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:209
msgid "Black"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:210
#: ../../source/chapters/02_drawing/drawing.rst:212
#: ../../source/chapters/02_drawing/drawing.rst:213
#: ../../source/chapters/02_drawing/drawing.rst:214
#: ../../source/chapters/02_drawing/drawing.rst:215
msgid "255"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:210
msgid "White"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:211
msgid "127"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:211
msgid "Gray"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:215
msgid "Yellow"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:218
msgid ""
"There are tools that let you easily find a color, and then get the RGB "
"values. One I really like, because it is easy to remember is "
"\"`colorpicker.com <http://www.colorpicker.com>`_\". You can select the "
"color, and then get the numbers to use when specifying a color. See the "
"image below:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:225
msgid ""
"After getting the number, specify the color as a set of three numbers "
"surrounded by parenthesis, like this:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:232
msgid ""
"In addition to RGB, you can also specify \"Alpha.\" The \"Alpha Channel\""
" controls how transparent the color is. If you draw a square with an "
"alpha of 255, it will be solid and hide everything behind it. An alpha of"
" 127 will be in the middle, you will see some of the items behind the "
"square. An alpha of 0 is completely transparent and you'll see nothing of"
" the square."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:242
msgid "Wait, What Is Up With 255?"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:244
msgid ""
"Notice how the color values go between 0 and 255? That's strange. Why "
"255? Why not 100? Why not 1000?"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:247
msgid ""
"The reason is important to understand how computers work. Remember how "
"everything is stored in numbers? They are not just stored in numbers, "
"they are stored in 1's and 0's."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:251
msgid ""
"Everything to the compute is a switch. If there is electricity, we have a"
" 1. If there is no electricity we have a 0. We can store those 1's and "
"0's in memory. We call these 1's and 0's **binary numbers**."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:255
msgid ""
"How do we go from 1's and 0's to numbers we normally use? For example, a "
"number like 758? We do that with a combination of 1's and 0's. Like this:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:259
msgid "Binary - Base 2"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:259
msgid "Base 10"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:261
msgid "0000"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:262
msgid "0001"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:262
#: ../../source/chapters/07_lists/lists.rst:545
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:33
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:35
msgid "1"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:263
msgid "0010"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:263
#: ../../source/chapters/07_lists/lists.rst:547
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:31
msgid "2"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:264
msgid "0011"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:264
#: ../../source/chapters/07_lists/lists.rst:549
msgid "3"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:265
msgid "0100"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:265
#: ../../source/chapters/07_lists/lists.rst:551
msgid "4"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:266
msgid "0101"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:266
#: ../../source/chapters/07_lists/lists.rst:553
msgid "5"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:267
msgid "0110"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:267
#: ../../source/chapters/07_lists/lists.rst:555
msgid "6"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:268
msgid "0111"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:268
#: ../../source/chapters/07_lists/lists.rst:557
msgid "7"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:269
msgid "1000"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:269
#: ../../source/chapters/07_lists/lists.rst:559
msgid "8"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:272
msgid ""
"See the pattern? It is the same pattern we use when we count as a kid. As"
" a kid we learned to go 0 to 9, then when we hit 9 we go back to 0 and "
"add one to the ten's place. Here we only have 0 to 1 instead of 0 to 9. "
"And instead of a \"ten's place\" we have a \"two's place.\""
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:278
msgid ""
"You might have used \"bases\" in math class long ago. Computers work in "
"Base-2 because they only have two ways to count, on or off. Humans think "
"in Base-10 because we have 10 fingers."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:282
msgid ""
"Numbers are stored in **bytes**. A byte is a set of eight binary numbers."
" If we were to follow the pattern we started above, the largest number we"
" could store with eight 1's and 0's is::"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:288
msgid "In Base-10 this is 255."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:290
msgid ""
"Let's use some math. We have 8 ones and zeros. That give us 2 :sup:`8` = "
"256 possible numbers. Since zero is a combination, that makes the biggest"
" number 255."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:293
msgid ""
"If we had 16 bits, then we'd have 2 :sup:`16` = 65,536 possible "
"combinations. Or a number from 0-65535. A 32-bit computer can hold "
"numbers up to 2 :sup:`32` = 4,294,967,296. A 64-bit computer can hold "
"really large numbers!"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:297
msgid ""
"So because a computer holds colors with one byte for red, one for green, "
"and one for blue, each color has a value range from 0 - 255."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:301
msgid "The Coordinate System"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:303
msgid ""
"In your math classes, you've learned about the Cartesian coordinate "
"system, which looks like this:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:309
msgid ""
"Source: `Wikipedia: Cartesian coordinate system "
"<https://commons.wikimedia.org/wiki/File:Cartesian_coordinate_system_(comma).svg>`_"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:311
msgid ""
"Our graphics will be drawn using this same system. But there are "
"additional things to keep in mind:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:314
msgid ""
"We will only draw in the upper right quadrant. So 0,0 will be in the "
"lower left of the screen, and all negative coordinates will be off-"
"screen."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:316
msgid ""
"Each \"Point\" will be a pixel. So a window that is 800 pixels wide, will"
" have x-coordinates that run from 0 to 800."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:320
msgid "Drawing a Rectangle"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:322
msgid ""
"Let's start drawing with a program to draw a rectangle. The function we "
"will use is ``draw_lrtb_rectangle_filled``. It stands for \"draw left-"
"right-top-bottom rectangle\"."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:326
msgid "We'll use this program to draw a green rectangle:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:333
msgid "There are a lot of shapes we can draw. Try running the program below:"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:340
msgid "Drawing primitives"
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:342
msgid ""
"For a program showing all the drawing primitives, see the example "
"`Drawing Primitives`_. Also, see the API documentation's `Quick Index`_."
msgstr ""

#: ../../source/chapters/02_drawing/drawing.rst:345
msgid "What's next? Try :ref:`lab-02`."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:5
msgid "Drawing with Functions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:7
msgid ""
"The goal of this chapter is to learn how to create our own functions to "
"draw. We don't want to be stuck with just ``draw_circle`` commands. We "
"want to be able to define create our own ``draw_tree`` or ``draw_house`` "
"commands."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:12
msgid ""
"A **function** is a block of code that we can **call** with just one "
"line. Functions give us the ability to write:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:15
msgid "Clear, easy-to-read code."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:16
msgid "The ability to reuse code."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:18
msgid ""
"We have already *used* functions. Now we want *define* our own. Defining "
"a function is like giving a recipe to computer. Once we give the computer"
" a recipe for banana bread, we just have to tell the computer to \"make "
"banana bread.\" There's no need to tell it the steps again."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:23
msgid "To create our own drawing functions we need to learn three new skills:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:25
msgid "How to define a function"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:26
msgid "How to use variables"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:27
msgid "How to create simple mathematical expressions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:30
msgid "How to Define a Function"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:32
msgid "Defining a function is rather easy."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:34
msgid "Start with the keyword ``def``, which is short for \"define.\""
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:35
msgid ""
"Next, give the function a name. There are rules for function names. They "
"must:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:37
msgid "Start with a lower case letter."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:38
msgid "After the first letter, only use letters, numbers, and underscores."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:39
msgid "Spaces are not allowed. Use underscores instead."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:40
msgid ""
"While upper-case letters can be used, function names are normally all "
"lower-case."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:43
msgid ""
"After that, we have a set of parenthesis. Inside the parenthesis will go "
"**parameters**. We'll explain those in a bit."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:45
msgid "Next, a colon."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:46
msgid "Everything that is part of the function will be indented four spaces."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:47
msgid ""
"Usually we start a function with a multi-line comment that explains what "
"the function does."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:50
msgid "Here is an example of a function:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:60
msgid "To call the function, all we need to do is:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:66
msgid ""
"Below is a full program that defines and uses the function. Notice that "
"function definitions go *below* the ``import`` statements, and *above* "
"the rest of the program. While you can put them somewhere else, you "
"shouldn't."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:75
msgid ""
"Great! Let's make this scene a little better. I've created another "
"function called ``draw_pine_tree`` which will...you guessed it. Draw a "
"pine tree."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:78
msgid "Here's what it will look like:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:82
msgid "And here's the code:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:89
msgid ""
"Great! But what if I want a forest? I want lots of trees? Do I create a "
"function for every tree? That's no fun. How can I create a function that "
"allows me to say where I want the tree? Like what if I wanted to draw "
"three trees and specify (x, y) coordinates of those trees::"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:98
msgid ""
"To be able to do this, I need to learn about variables, expressions, and "
"function parameters."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:102
msgid "How to Use Variables"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:104
msgid ""
"A **variable** is a value the computer stores in memory that can change. "
"That is, it *varies*."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:107
msgid ""
"You've used variables in mathematics before. With computer science, we "
"use them a lot. But in math class, you were given the equation and you "
"had to solve for the variable. In computer science class, *we* come up "
"with the equation and the *computer* solves the variable."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:112
msgid "Here is a quick example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:120
msgid "What will the code above print? It will print ``5``."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:122
msgid ""
"The ``=`` is called an **assignment operator**. It assigns the value on "
"the right side to the variable on the left."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:125
msgid ""
"Here's another example. Very similar, but something is different. What "
"will it print?"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:134
msgid "The code above prints ``x``. Why not ``5``? Because:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:136
msgid ""
"If there are no quotes, the computer evaluates code like a mathematical "
"expression."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:138
msgid ""
"If there are quotes, we treat what is between the quotes as a string of "
"characters and don't change it."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:141
msgid ""
"In fact, that is what we call the characters between the quotes. A "
"**string**, which is short for \"string of characters.\" We don't call it"
" \"text.\""
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:144
msgid "The following code won't print at all:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:150
msgid ""
"The code above will fail because the computer will think that it should "
"evaluate ``Have a great day!`` as a mathematical expression. It isn't, so"
" the computer gets confused and generates an error. That's why we need "
"quotes:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:159
msgid "Variable and Function Names"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:161
msgid ""
"Variable names and function names follow the same rules. There are names "
"you *should* use, names you *shouldn't* use, and names you *can't* use."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:170
msgid "Good variable name examples:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:166
msgid "temperature_in_celsius"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:167
msgid "tree_position"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:168
msgid "car_speed"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:169
msgid "number_of_children"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:170
msgid "simpson"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:175
msgid "Legal, but bad variable names:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:173
msgid ""
"temperatueInCelsius - Uses capital letters. Keep it lower case and use "
"underscores."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:174
msgid "x - Too short, and not descriptive."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:175
msgid "Simpson - Starts with a capital letter."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:179
msgid "Variable names that won't work:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:178
msgid "tree position - Can't use spaces"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:179
msgid "4runner - Can't start with a number"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:181
msgid ""
"Sometimes we want to create a variable that won't change. We call these "
"variables **constants**. By convention, these variable names are in all "
"upper case. They are the only variables that use upper-case. For example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:192
msgid ""
"Good variable names help make code *readable*. Note the example below "
"that calculates miles-per-gallon. It isn't easy to understand."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:203
msgid ""
"But the code below that uses descriptive variable names *is* easy to "
"understand."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:214
msgid "How to Create Expressions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:217
msgid "Using Operators in Expressions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:219
msgid ""
"Great! We are part-way there. To really be powerful, variables need to be"
" used with **expressions**. An expression is simply a mathematical "
"equation like what you've used in math before. Here's an example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:229
msgid ""
"As you can probably guess, this will print out ``15``. We call the ``+`` "
"sign an **operator**. Here are some other operators:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:233
msgid "Operator"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:233
msgid "Description"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:235
msgid "\\+"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:235
msgid "Addition"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:236
msgid "\\-"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:236
msgid "Subtraction"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:237
msgid "\\*"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:237
msgid "Multiplication"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:238
#: ../../source/chapters/07_lists/lists.rst:541
msgid "/"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:238
msgid "Division"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:239
msgid "//"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:239
msgid "Integer division (rounds down)"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:240
msgid "%"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:240
msgid "Modulus (gives remainder of division)"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:243
msgid ""
"There are two things that **don't** work like you'd expect. There is no "
"\"juxtaposition\" used to multiply items. And the ``=`` is not an "
"algebraic equality"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:248
msgid "Juxtaposition Doesn't Work"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:250
msgid ""
"Juxtaposition doesn't work for multiplication. For example, the following"
" will **not** work:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:260
msgid "You can rewrite the code above to work by explicitly multiplying:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:269
msgid "Easy enough, just remember to use ``*`` any time you want to multiply."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:272
msgid "It isn't an Algebraic Inequality"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:274
msgid ""
"The ``=`` doesn't work the same as in algebra. The ``=`` evaluates what "
"is on the right, and puts it in the variable on the left. For example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:296
msgid "This allows us to do some strange things we can't do in algebra!"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:310
msgid ""
"We can use expressions even in the calls that we make. For example, we "
"have a ``draw_triangle_filled`` function. It takes three points to draw a"
" triangle. It needs ``x1, y1, x2, y2, x3, y3``. What if we wanted to "
"center a triangle around a point, and specify a width and height?"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:317
msgid "We can use that math when we call our function to draw:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:332
msgid "Order of Operations"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:334
msgid ""
"Python will evaluate expressions using the same order of operations that "
"are expected in standard mathematical expressions. For example this "
"equation does not correctly calculate the average:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:342
msgid "The first operation done is 98/5. The computer calculates:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:348
msgid "rather than the desired:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:354
msgid "By using parentheses this problem can be fixed:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:361
msgid "How to Create a Custom Drawing Function"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:363
msgid ""
"We can call functions with **parameters**. When we declare a function we "
"can put new variables between the parenthesis. See line 15 below. The two"
" variables ``position_x`` and ``position_y`` will take whatever value is "
"passed in when the function is called."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:368
msgid ""
"On line 46, we call ``draw_pine_tree`` with two numbers, ``70`` and "
"``90``. The variable ``position_x`` will be assigned ``70``, and the "
"variable ``position_y`` will be assigned ``90``."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:377
msgid ""
"We can use the variables from the parameters, and some mathematical "
"expressions to draw a tree. Line 38 draws a small red point where the "
"\"origin\" of the tree is. That is, I draw the point at ``(position_x, "
"position_y)``. From there you can get an idea of how the other shapes "
"relate in position."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:384
msgid "Spend some time matching the math to the origin and how it gets there."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:386
msgid "We can use the function several times:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:401
msgid "Make Everything a Function"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:403
msgid ""
"Code is easier to maintain and visualize if it is broken down into parts."
" Now that we know how to use functions, it is better programming practice"
" to put *everything* into a function."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:407
msgid ""
"Below is the same program we had before, but the main code has been moved"
" into a ``main`` function."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:415
msgid ""
"This is much better design-wise. However it isn't perfect. Later on we "
"will show you how to make your own code libraries. And if you import this"
" file as a code library, you will not only get the ``draw_pine_tree`` "
"function to use in your own game, the import statement will actually run "
"the program and display a window!"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:421
msgid ""
"We don't want to run the main program if we are importing this as a "
"library. We'll explain this more later, but to get into good habits now, "
"use the code on lines 61 and 62 to call the main function instead."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:431
msgid "Returning and Capturing Values"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:433
msgid "Functions can not only take in values, functions can return values."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:436
msgid "Returning values"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:438
msgid "For example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:440
msgid "Function that returns two numbers added together"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:449
msgid ""
"Note: Return is not a function, and does not use parentheses. Don't do "
"``return(result)``."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:452
msgid ""
"This only gets us half-way there. Because if we call the function now, "
"not much happens. The numbers get added. They get returned to us. But we "
"do nothing with the result."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:462
msgid "Capturing Returned Values"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:464
msgid ""
"We need to capture the result. We do that by setting a variable equal to "
"the value the function returned:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:473
msgid ""
"Now the result isn't lost. It is stored in my_result which we can print "
"or use some other way."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:476
msgid "Volume Cylinder Example"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:478
msgid "Function that returns the volume of a cylinder"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:487
msgid ""
"Because of the return, this function could be used later on as part of an"
" equation to calculate the volume of a six-pack like this:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:494
msgid ""
"The value returned from volume_cylinder goes into the equation and is "
"multiplied by six."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:497
msgid ""
"There is a big difference between a function that prints a value and a "
"function that returns a value. Look at the code below and try it out."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:526
msgid ""
"When first working with functions it is not unusual to get stuck looking "
"at code like this:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:543
msgid ""
"How do we print the result of calculate_average? The program can't print "
"result because that variable only exists inside the function. Instead, "
"use a variable to capture the result:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:562
msgid "Documenting Functions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:564
msgid ""
"Functions in Python typically have a comment as the first statement of "
"the function. This comment is delimited using three double quotes, and is"
" called a docstring. A function may look like:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:576
msgid ""
"The great thing about using docstrings in functions is that the comment "
"can be pulled out and put into a website documenting your code using a "
"tool like Sphinx. Most languages have similar tools that can help make "
"documenting your code a breeze. This can save a lot of time as you start "
"working on larger programs."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:583
msgid "Variable Scope"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:585
msgid ""
"The use of functions introduces the concept of scope. Scope is where in "
"the code a variable is \"alive\" and can be accessed. For example, look "
"at the code below:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:601
msgid ""
"The last line will generate an error because x only exists inside of the "
"f() function. The variable is created when ``f()`` is called and the "
"memory it uses is freed as soon as ``f()`` finishes."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:605
msgid ""
"Here's where it gets complicated. A more confusing rule is accessing "
"variables created outside of the ``f()`` function. In the following code,"
" x is created before the ``f()`` function, and thus can be read from "
"inside the ``f()`` function."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:622
msgid ""
"Variables created ahead of a function may be read inside of the function "
"only if the function does not change the value. This code, very similar "
"to the code above, will fail. The computer will claim it doesn't know "
"what x is."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:639
msgid ""
"Other languages have more complex rules around the creation of variables "
"and scope than Python does. Because Python is straight-forward it is a "
"good introductory language."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:644
msgid "Pass-by-Copy"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:646
msgid ""
"Functions pass their values by creating a copy of the original. For "
"example:"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:662
msgid ""
"The value of y does not change, even though the f() function increases "
"the value passed to it. Each of the variables listed as a parameter in a "
"function is a brand new variable. The value of that variable is copied "
"from where it is called."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:667
msgid ""
"This is reasonably straight forward in the prior example. Where it gets "
"confusing is if both the code that calls the function and the function "
"itself have variables named the same. The code below is identical to the "
"prior listing, but rather than use y it uses x."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:686
msgid ""
"The output is the same as the program that uses y. Even though both the "
"function and the surrounding code use x for a variable name, there are "
"actually two different variables. There is the variable x that exists "
"inside of the function, and a different variable x that exists outside "
"the function."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:693
msgid "Functions Calling Functions"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:695
msgid ""
"For each of the examples below, think about what would print. Check to "
"see if you are right. If you didn't guess correctly, spend to the time to"
" understand why."
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:700
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:270
msgid "Example 1"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:717
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:288
msgid "Example 2"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:737
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:300
msgid "Example 3"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:756
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:312
msgid "Example 4"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:778
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:324
msgid "Example 5"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:799
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:337
msgid "Example 6"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:813
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:349
msgid "Example 7"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:828
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:361
msgid "Example 8"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:843
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:374
msgid "Example 9"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:858
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:386
msgid "Example 10"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:876
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:398
msgid "Example 11"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:893
#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:411
msgid "Example 12"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:911
msgid "Example 13"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:928
msgid "Example 14"
msgstr ""

#: ../../source/chapters/03_drawing_with_functions/drawing_with_functions.rst:945
msgid "Example 15"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:5
msgid "Quiz Games and If Statements"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:7
msgid ""
"How do we tell if a player has beat the high score? How can we tell if he"
" has run out of lives? How can we tell if she has the key required to "
"open the locked door?"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:12
msgid ""
"What we need is the ``if`` statement. The ``if`` statement is also known "
"as a *conditional statement*. (You can use the term \"conditional "
"statement\" when you want to impress everyone how smart you are.) The if "
"statement allows a computer to make a decision. Is it hot outside? Has "
"the spaceship reached the edge of the screen? Has too much money been "
"withdrawn from the account? A program can test for these conditions with "
"the ``if`` statement."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:24
msgid "Basic Comparisons"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:26
msgid ""
"Here are a few examples of ``if`` statements. The first section sets up "
"two variables (a and b) for use in the ``if`` statements. Then two ``if``"
" statements show how to compare the variables to see if one is greater "
"than the other."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:30
msgid "Example ``if`` statements: less than, greater than"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:47
#: ../../source/chapters/20_recursion/recursion.rst:128
#: ../../source/chapters/20_recursion/recursion.rst:220
msgid "Output"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:53
msgid ""
"Since ``a`` is less than ``b``, the first statement will print out if "
"this code is run. If the variables ``a`` and ``b`` were both equal to 4, "
"then neither of the two ``if`` statements above would print anything out."
" The number 4 is not greater than 4, so the ``if`` statement would fail."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:58
msgid ""
"To show the flow of a program a *flowchart* may be used. Most people can "
"follow a flowchart even without an introduction to programming. See how "
"well you can understand the figure below."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:65
msgid "Flowchart"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:67
msgid ""
"This book skips an in-depth look at flowcharting because it is boring. "
"But if you want to be a superstar programmer, please read more about it "
"at:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:70
msgid "http://en.wikipedia.org/wiki/Flowchart"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:72
msgid ""
"The prior example checked for greater than or less than. Numbers that "
"were equal would not pass the test. To check for a values greater than or"
" equal, the following examples show how to do this:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:76
msgid "Example ``if`` statements: less than or equal, greater than or equal"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:86
msgid ""
"The ``<=`` and ``>=`` symbols must be used in order, and there may not be"
" a space between them. For example, ``=<`` will not work, nor will ``< "
"=``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:89
msgid ""
"When writing these statements out on a test, some students like to use "
"the ``≤`` symbol. For example:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:96
msgid ""
"This ``≤`` symbol doesn't actually work in a program. Plus most people "
"don't know how to easily type it on the keyboard. (Just in case you are "
"curious, to type it hold down the 'alt' key while typing 243 on the "
"number pad.) So when writing out code, remember that it is ``<=`` and not"
" ``≤``. Many people lose points on tests for this reason; don't be that "
"person."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:102
msgid ""
"The next set of code checks to see if two items are equal or not. The "
"operator for equal is ``==`` and the operator for not equal is ``!=``. "
"Here they are in action."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:106
msgid "Example ``if`` statements: equal not equal"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:118
msgid "Learn when to use = and ==."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:120
msgid ""
"It is very easy to mix up when to use ``==`` and ``=``. Use ``==`` if you"
" are asking if they are equal, use ``=`` if you are assigning a value."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:123
msgid ""
"The two most common mistakes in mixing the ``=`` and ``==`` operators are"
" demonstrated below:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:136
msgid ""
"Stop! Please take a moment to go back and carefully study the last two "
"code examples. Save time later by making sure you understand when to use "
"``=`` and ``==``. Don't guess."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:141
msgid "Indentation"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:143
msgid ""
"Indentation matters. Each line under the ``if`` statement that is "
"indented will only be executed ``if`` the statement is ``True``:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:156
msgid "Indentation must be the same. This code doesn't work."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:166
msgid ""
"Once an ``if`` statement has been finished, it is not possible to re-"
"indent to go back to it. The test has to be performed again."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:180
msgid "Using And/Or"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:182
msgid ""
"An ``if`` statement can check multiple conditions by chaining together "
"comparisons with ``and`` and ``or``. These are also considered to be "
"*operators* just like ``+`` or ``-`` are."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:187
msgid "Example ``if`` statements, using \"and\" and \"or\""
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:199
msgid "Repeat yourself please."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:201
msgid ""
"A common mistake is to omit a variable when checking it against multiple "
"conditions. The code below does not work because the computer does not "
"know what to check against the variable ``c``. It will not assume to "
"check it against ``a``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:214
msgid "Boolean Variables"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:216
msgid ""
"Python supports Boolean variables. What are Boolean variables? Boolean "
"variables can store either a ``True`` or a value of ``False``. `Boolean "
"algebra`_ was developed by `George Boole`_ back in 1854. If only he knew "
"how important his work would become as the basis for modern computer "
"logic!"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:224
msgid ""
"An ``if`` statement needs an expression to evaluate to ``True`` or "
"``False``. What may seem odd is that it does not actually need to do any "
"comparisons if a variable already evaluates to ``True`` or ``False``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:228
msgid "If statements and Boolean data types"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:237
msgid ""
"Back when I was in school it was popular to say some false statement. "
"Wait three seconds, then shout \"NOT!\" Well, even your computer thinks "
"that is lame. If you are going to do that, you have to start with the not"
" operator. The following code uses the not to flip the value of a between"
" true and false."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:242
msgid "The not operator example 1"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:250
msgid ""
"Because not is an operator and not a function, the parentheses aren't "
"necessary. This is also legal:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:253
msgid "The not operator example 2"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:261
msgid "It is also possible to use Boolean variables with and and or operators."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:263
msgid "Using \"and\" with Boolean variables"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:273
msgid "Who knew True/False could be hard?"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:275
msgid ""
"It is also possible to assign a variable to the result of a comparison. "
"In the code below, the variables ``a`` and ``b`` are compared. If they "
"are equal, ``c`` will be ``True``, otherwise ``c`` will be ``False``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:279
msgid "Assigning values to Boolean data types"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:294
msgid "Zero means False. Everything else is True."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:296
msgid ""
"It is possible to create an ``if`` statement with a condition that does "
"not evaluate to ``True`` or ``False``. This is not usually desired, but "
"it is important to understand how the computer handles these values when "
"searching for problems. The statement below is legal and will cause the "
"text to be printed out because the values in the ``if`` statement are "
"non-zero:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:310
msgid ""
"The code below will not print out anything because the value in the "
"``if`` statement is zero which is treated as ``False``. Any value other "
"than zero is considered ``True``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:320
msgid ""
"In the code below, the first ``if`` statement appears to work. The "
"problem is that it will always trigger as true even ``if`` the variable "
"``a`` is not equal to ``b``. This is because ``b`` by itself is "
"considered ``True``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:336
msgid "Else and Else If"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:338
msgid ""
"Below is code that will get the temperature from the user and print if it"
" is hot."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:348
msgid ""
"If the programmer wants code to be executed if it is not hot, she can use"
" the else statement. Notice how the else is lined up with the ``i`` in "
"the ``if`` statement, and how it is followed by a colon just like the "
"``if`` statement."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:352
msgid ""
"In the case of an if...else statement, one block of code will always be "
"executed. The first block will be executed ``if`` the statement evaluates"
" to ``True``, the second block if it evaluates to False."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:356
msgid "Example if/else statement"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:367
msgid ""
"It is possible to chain several ``if`` statements together using the "
"else...if statement. Python abbreviates this as ``elif``."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:370
msgid "Example if/elif/else statement"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:383
msgid ""
"In the code below, the program will output \"It is hot outside\" even if "
"the user types in 120 degrees. Why? How can the code be fixed?"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:386
msgid "If you can't figure it out, see the video."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:388
msgid "Example of improper ordering if/elif/else"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:410
msgid "Text Comparisons"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:412
msgid "It is possible to use an if statement to check text."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:414
msgid "Case sensitive text comparison"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:424
msgid ""
"The prior example will only match if the user enters \"Paul\". It will "
"not work if the user enters \"paul\" or \"PAUL\"."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:426
msgid ""
"A common mistake is to forget the quotes around the string being "
"compared. In the example below, the computer will think that Paul is a "
"variable that stores a value. It will flag an error because it has no "
"idea what is stored in the variable Paul."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:428
msgid "Incorrect comparison"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:441
msgid "Multiple Text Possibilities"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:443
msgid ""
"When comparing a variable to multiple possible strings of text, it is "
"important to remember that the comparison must include the variable. For "
"example:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:456
msgid ""
"This is because any value other than zero, the computer assumes to mean "
"``True``. So to the computer \"Mary\" is the same thing as ``True`` and "
"so it will run the code in the ``if`` statement."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:461
msgid "Case Insensitive Comparisons"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:463
msgid ""
"If the program needs to match regardless as to the case of the text "
"entered, the easiest way to do that is to convert everything to lower "
"case. This can be done with the lower command."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:465
msgid "Learn to be insensitive."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:467
msgid ""
"The example below will take whatever the user enters, convert it to lower"
" case, and then do the comparison. Important: Don't compare it against a "
"string that has uppercase. If the user input is converted to lowercase, "
"then compared against uppercase letters, there is no way a match can "
"occur."
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:469
msgid "Case-insensitive text comparison"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:480
msgid "Example if Statements"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:482
msgid ""
"The next set of example code below runs through all the concepts talked "
"about earlier. The on-line video traces through each line of code and "
"explains how it works"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:486
msgid ""
"In the video I use an integrated development editor (IDE) called Eclipse."
" The default version of Eclipse doesn't work with Python, but the PyDev "
"version does. The PyDev editor is available for free from:"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:490
msgid "http://pydev.org/"
msgstr ""

#: ../../source/chapters/04_if_statements/if_statements.rst:492
msgid ""
"The editor is complex, but it has many options and can be a powerful "
"environment to work in. Some programmers like using environments such as "
"PyDev that can have so many plug-ins that will do everything but bring "
"you coffee. Some developers prefer a minimalistic environment that "
"doesn't \"get in the way.\""
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:5
msgid "Guessing Games with Random Numbers and Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:11
msgid ""
"Our next step is how to loop a section of code. Most games \"loop.\" They"
" repeat the same code over and over. For example the number guessing game"
" below loops for each guess that the user makes:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:41
msgid ""
"Wait, what does this have to do with graphics and video games? A lot. "
"Each *frame* the game displays is one time through a loop. You may be "
"familiar with the frames-per-second (FPS) statistic that games show. The "
"FPS represents the number of times the computer updates the screen each "
"second. The higher the rate, the smoother the game. (Although an FPS rate"
" past 60 is faster than most screens can update, so there isn't much "
"point to push it past that.) The figure below shows the game Eve Online "
"and a graph showing how many frames per second the computer is able to "
"display."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:52
msgid "FPS in video games"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:54
msgid ""
"The loop in these games works like the flowchart in the figure below. "
"Despite the complexities of modern games, the inside of this loop is "
"similar to a calculator program. Get user input. Perform calculations. "
"Output the result. In a video game, we try to repeat this up to 60 times "
"per second."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:62
msgid "Game loop"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:64
msgid ""
"There can even be loops inside of other loops. A real \"loop the loop.\" "
"Take a look at the \"Draw Everything\" box in Figure 4.2. This set of "
"code loops through and draws each object in the game. That loop is inside"
" of the larger loop that draws each frame of the game, which looks like "
"the figure below."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:71
msgid "Draw everything loop"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:73
msgid ""
"There are two major types of loops in Python, ``for`` loops and ``while``"
" loops. If you want to repeat a certain number of times, use a ``for`` "
"loop. If you want to repeat until something happens (like the user hits "
"the quit button) then use a ``while`` loop."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:78
msgid ""
"For example, a ``for`` loop can be used to print all student records "
"since the computer knows how many students there are. A ``while`` loop "
"would need to be used to check for when a user hits the mouse button "
"since the computer has no idea how long it will have to wait."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:84
msgid "For Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:86
msgid ""
"The ``for`` loop example below runs the print statement five times. It "
"could just as easily run 100 or 1,000,000 times just by changing the 5 to"
" the desired number of times to loop. Note the similarities of how the "
"``for`` loop is written to the if statement. Both end in a colon, and "
"both use indentation to specify which lines are affected by the "
"statement."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:90
msgid "Loop to print five times"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:97
msgid "Output:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:107
msgid ""
"The ``i`` on line 1 is a variable that keeps track of how many times the "
"program has looped. It is a new variable and can be named any legal "
"variable name. Programmers often use ``i`` as for the variable name, "
"because the ``i`` is short for *increment*. This variable helps track "
"when the loop should end."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:112
msgid ""
"The ``range`` function controls how many times the code in the loop is "
"run. In this case, five times."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:115
msgid ""
"The next example code will print \"Please,\" five times and \"Can I go to"
" the mall?\" only once. \"Can I go to the mall?\" is not indented so it "
"is not part of the for loop and will not print until the for loop "
"completes."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:126
#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:147
#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:171
#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:205
#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:251
#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:278
msgid "Output::"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:135
msgid ""
"This next code example takes the prior example and indents line 3. This "
"change will cause the program to print \"Please,\" and \"Can I go to the "
"mall?\" five times. Since the statement has been indented \"Can I go to "
"the mall?\" is now part of the for loop and will repeat five times just "
"like the word \"Please,\"."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:160
msgid ""
"The code below will print the numbers 0 to 9. Notice that the loop starts"
" at 0 and does not include the number 10. It is natural to assume that "
"``range(10)`` would include 10, but it stops just short of it."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:164
msgid "Print the numbers 0 to 9"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:184
msgid ""
"A program does not need to name the variable i, it could be named "
"something else. For example a programmer might use lineNumber if she was "
"processing a text file."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:188
msgid ""
"If a programmer wants to go from 1 to 10 instead of 0 to 9, there are a "
"couple ways to do it. The first way is to send the ``range`` function two"
" numbers instead of one. The first number is the starting value, the "
"second is just beyond the ending value."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:193
msgid ""
"It does take some practice to get used to the idea that the for loop will"
" include the first number, but not the second number listed. The example "
"below specifies a range of (1,11), and the numbers 1 to 10 are printed. "
"The starting number 1 is included, but not the ending number of 11."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:198
msgid "Print the numbers 1 to 10, version 1"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:218
msgid ""
"Another way to print the numbers 1 to 10 is to still use ``range(10)`` "
"and have the variable i go from 0 to 9. But just before printing out the "
"variable the programmer adds one to it. This also works to print the "
"numbers 1 to 10. Either method works just fine."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:223
msgid "Print the numbers 1 to 10, version 2"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:232
msgid "Counting By Numbers Other Than One"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:234
msgid ""
"If the program needs to count by 2's or use some other increment, that is"
" easy. Just like before there are two ways to do it. The easiest is to "
"supply a third number to the ``range`` function that tells it to count by"
" 2's. The second way to do it is to go ahead and count by 1's, but "
"multiply the variable by 2. The code example below shows both methods."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:240
msgid "Two ways to print the even numbers 2 to 10"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:264
msgid ""
"It is also possible to count backwards down towards zero by giving the "
"``range`` function a negative step. In the example below, start at 10, go"
" down to but not including 0, and do it by -1 increments. The hardest "
"part of creating these loops is to accidentally switch the start and end "
"numbers. The program starts at the larger value, so it goes first. Normal"
" for loops that count up start with the smallest value listed first in "
"the ``range`` function."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:271
msgid "Count down from 10 to 1"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:291
msgid ""
"If the numbers that a program needs to iterate through don't form an easy"
" pattern, it is possible to pull numbers out of a list. (A full "
"discussion of lists is covered in a later chapter. This is just a preview"
" of what you can do.)"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:296
msgid "Print numbers out of a list"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:303
msgid "This prints::"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:315
msgid "Nesting Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:321
msgid ""
"Try to predict what the code below will print. Then enter the code and "
"see if you are correct."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:333
msgid ""
"This next block of code is almost identical to the one above. The second "
"for loop has been indented one tab stop so that it is now nested inside "
"of the first for loop. This changes how the code runs significantly. Try "
"it and see."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:348
msgid "I'm not going to tell you what the code does, go to a computer and see."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:355
msgid "Keeping a Running Total"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:361
msgid ""
"A common operation in working with loops is to keep a running total. This"
" \"running total\" code pattern is used a lot in this book. Keep a "
"running total of a score, total a person's account transactions, use a "
"total to find an average, etc. You might want to bookmark this code "
"listing because we'll refer back to it several times. In the code below, "
"the user enters five numbers and the code totals up their values."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:368
msgid "Keep a Running Total"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:378
msgid ""
"Note that line 1 creates the variable total, and sets it to an initial "
"amount of zero. It is easy to forget the need to create and initialize "
"the variable to zero. Without it the computer will complain when it hits "
"line 4. It doesn't know how to add n``ew_number`` to total because total "
"hasn't been given a value yet."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:383
msgid ""
"A common mistake is to use ``i`` to total instead of ``new_number``. "
"Remember, we are keeping a running total of the values entered by the "
"user, not a running total of the current loop count."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:387
msgid ""
"Speaking of the current loop count, we can use the loop count value to "
"solve some mathematical operations. For example:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:394
msgid ""
"If you aren't familiar with this type of formula, it is just a fancy way "
"of stating:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:401
msgid ""
"The code below adds all the numbers from 1 to 100. It demonstrates a "
"common pattern where a running total is kept inside of a loop. This also "
"uses a separate variable sum to track the running total."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:405
msgid "Sum all numbers 1 to 100"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:415
msgid ""
"Here's a different variation. This takes five numbers from the user and "
"counts the number of times the user enters a zero:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:428
msgid ""
"A programmer that understands the nested for loops and running totals "
"should be able to predict the output of the code below."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:456
msgid ""
"Don't go over this section too fast. Give it a try and predict the output"
" of the code above. Then copy it into a Python program and run it to see "
"if you are right. If you aren't, figure out why."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:461
msgid "Example for Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:463
msgid "This example code covers common for loops and shows how they work."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:465
msgid "for_loop_examples.py"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:471
msgid "While Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:477
msgid ""
"A ``for`` loop is used when a program knows it needs to repeat a block of"
" code for a certain number of times. A ``while`` loop is used when a "
"program needs to loop until a particular condition occurs."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:481
msgid ""
"Oddly enough, a while loop can be used anywhere a ``for`` loop is used. "
"It can be used to loop until an increment variable reaches a certain "
"value. Why have a ``for`` loop if a while loop can do everything? The "
"``for`` loop is simpler to use and code. A ``for`` loop that looks like "
"this:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:486
msgid "Using a ``for`` loop to print the numbers 0 to 9"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:494
msgid "Can be done with a ``while`` loop that looks like this:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:496
msgid "Using a while loop to print the numbers 0 to 9"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:505
msgid ""
"Line 1 of the while loop sets up a \"sentinel\" variable that will be "
"used to count the number of times the loop has been executed. This "
"happens automatically in a ``for`` loop eliminating one line of code. "
"Line 2 contains the actual ``while`` loop. The format of the while loop "
"is very similar to the if statement. If the condition holds, the code in "
"the loop will repeat. Line 4 adds to the increment value. In a ``for`` "
"loop this happens automatically, eliminating another line of code. As one"
" can see from the code, the for loop is more compact than a ``while`` "
"loop and is easier to read. Otherwise programs would do everything with a"
" ``while`` loop."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:515
msgid ""
"A common mistake is to confuse the ``for`` loop and the ``while`` loop. "
"The code below shows a programmer that can't quite make up his/her mind "
"between a ``for`` loop or a ``while`` loop."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:519
msgid "Example of a confused loop"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:526
msgid "Don't use range with a ``while`` loop!"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:528
msgid ""
"The ``range`` function only works with the ``for`` loop. Do not use it "
"with the ``while`` loop!"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:532
msgid "Using Increment Operators"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:534
msgid ""
"Increment operators are often used with ``while`` loops. It is possible "
"to short-hand the code:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:541
msgid "With the following:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:547
msgid "In the while loop it would look like:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:557
msgid "This can be done with subtraction and multiplication as well. For example:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:563
msgid "Is the same as:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:569
msgid "See if you can figure out what would this print:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:579
msgid "Looping Until User Wants To Quit"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:581
msgid ""
"A very common operation is to loop until the user performs a request to "
"quit:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:583
msgid "Looping until the user wants to quit"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:591
msgid ""
"There may be several ways for a loop to quit. Using a Boolean variable to"
" trigger the event is a way of handling that. Here's an example:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:595
msgid "Looping until the game is over or the user wants to quit"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:610
msgid ""
"This isn't perfect though, because if the user says she wants to quit, "
"the code will still ask if she wants to attack the dragon. How could you "
"fix this?"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:613
msgid ""
"Here is an example of using a while loop where the code repeats until the"
" value gets close enough to zero:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:627
msgid "Common Problems With ``while`` Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:629
msgid ""
"The programmer wants to count down from 10. What is wrong and how can it "
"be fixed?"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:639
msgid ""
"What is wrong with this loop that tries to count to 10? What will happen "
"when it is run? How should it be fixed?"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:650
msgid "Example ``while`` Loops"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:652
msgid ""
"Here's a program that covers the different uses of the while loop that we"
" just talked about."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:654
msgid "while_loop_examples.py"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:660
msgid "Random Numbers"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:662
msgid ""
"Random numbers are heavily used in computer science for programs that "
"involve games or simulations."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:666
msgid "The ``randrange`` Function"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:672
msgid ""
"By default, Python does not know how to make random numbers. It is "
"necessary to have Python import a code library that can create random "
"numbers. So to use random numbers, the first thing that should appear at "
"the top of the program is an import statement:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:681
msgid ""
"Just like with pygame, it is important not to create a file with the same"
" name as what is being imported. Creating a file called random.py will "
"cause Python to start importing that file instead of the system library "
"that creates random numbers."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:686
msgid ""
"After this, random numbers can be created with the ``randrange`` "
"function. For example, this code creates random numbers from 0 to 49. By "
"default the lower bound is 0."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:690
msgid "Random number from 0 to 49"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:695
msgid ""
"The next code example generates random numbers from 100 to 200. Just like"
" the range function the second parameter specifies an upper-bound that is"
" not inclusive. Therefore if you want random numbers up to and including "
"200, specify 201."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:700
msgid "Random number from 100 to 200"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:705
msgid ""
"What if you don't want a number, but a random item? That requires a list."
" We don't cover lists in detail until a later chapter, but to give you "
"preview of what selecting a random item out of a list would look like, "
"see below:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:709
msgid "Picking a random item out of a list"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:719
msgid "The ``random`` Function"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:721
msgid ""
"All of the prior code generates integer numbers. If a floating point "
"number is desired, a programmer may use the ``random`` function."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:724
msgid ""
"The code below generates a random number from 0 to 1 such as "
"0.4355991106620656."
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:727
msgid "Random floating point number from 0 to 1"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:732
msgid ""
"With some simple math, this number can be adjusted. For example, the code"
" below generates a random floating point number between 10 and 15:"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:734
msgid "Random floating point number between 10 and 15"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:741
msgid "Mudball Example"
msgstr ""

#: ../../source/chapters/05_loops_and_random_numbers/loops_and_random_numbers.rst:743
msgid ""
"This is a fun text-only game that two players can play. It uses a few "
"concepts we haven't covered yet."
msgstr ""

#: ../../source/chapters/06_advanced_looping/advanced_looping.rst:5
msgid "Advanced Looping"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:5
msgid "Introduction to Lists"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:8
msgid "Data Types"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:14
msgid "So far this book has shown four types of data:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:16
msgid ""
"String (a string is short for \"string of characters,\" which normal "
"people think of as text.)"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:17
msgid "Integer"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:18
msgid "Floating point"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:19
msgid "Boolean"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:21
msgid "Python can display what type of data a value is with the type function."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:23
msgid ""
"This type function isn't useful for other programming in this book, but "
"it is good to demonstrate the types of data introduced so far. Type the "
"following into the interactive IDLE shell. (Don't create a new window and"
" type this in as a program; it won't work.)"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:50
msgid ""
"It is also possible to use the type function on a variable to see what "
"kind of data is in it."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:60
msgid "More than one coin to collect? Use a list!"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:62
msgid ""
"The two new types of data introduced in this chapter are Lists and "
"Tuples. Lists are similar to another data structure called an array. A "
"list can be resized, but an array can not. A course in data structures "
"will teach you the details, but it that is beyond the scope of this book."
" Try running the following commands in the interactive Python shell and "
"see what is displayed:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:74
msgid "Working With Lists"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:76
msgid ""
"You've created grocery lists, to-do lists, bucket lists, but how do you "
"create a list on the computer?"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:81
msgid "Even computers use lists"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:83
msgid ""
"Try these examples using IDLE's command line. To create a list and print "
"it out, try the following:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:92
msgid "To print an individual element in a list:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:99
msgid ""
"This number with the item's location is called the index. Note that list "
"locations start at zero. So a list or array with 10 elements does not "
"have an element in spot [10]. Just spots [0] through [9]. It can be very "
"confusing to create an list of 10 items and then not have an item 10, but"
" most computer languages start counting at 0 rather than 1."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:105
msgid ""
"Think of a list as an ice cube tray that holds numbers, as shown in "
"Figure 7.2. The values are stored inside each tray spot, and written on "
"the side of the tray are numbers starting at zero that identify the "
"location of each spot."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:111
msgid "Don't mix the index and the value!"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:113
msgid ""
"Remember, there are two sets of numbers to consider when working with a "
"list of numbers: the position and the value. The position, also known as "
"index, refers to where a value is. The value is the actual number stored "
"at that location. When working with a list or array, make sure to think "
"if you need the location or the value."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:119
msgid ""
"It is easy to get the value given the location, but it is harder to get "
"the location given the value. Chapter 15 is dedicated to answering how to"
" find the location of a particular value."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:125
msgid "Lists are like ice cube trays"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:127
msgid ""
"A program can assign new values to an individual element in a list. In "
"the case below, the first spot at location zero (not one) is assigned the"
" number 22."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:136
msgid ""
"Also, a program can create a \"tuple.\" This data type works just like a "
"list, but with two differences. First, it is created with parentheses "
"rather than square brackets. Second, it is not possible to change the "
"tuple once created. See below:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:154
msgid ""
"As can be seen from the output of the code above, we can't assign an item"
" in the tuple a new value. Why would we want this limitation? First, the "
"computer can run faster if it knows the value won't change. Second, some "
"lists we don't want to change, such as a list of RGB colors for red. The "
"color red doesn't change, therefore an immutable tuple is a better "
"choice."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:161
msgid "Iterating (Looping) Through a List"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:167
msgid ""
"If a program needs to iterate through each item in a list, such as to "
"print it out, there are two types of for loops that can do this."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:170
msgid ""
"The first method to iterate through each item in a loop is by using a "
"\"for-each\" loop. This type of loop takes a collection of items, and "
"loops the code once per item. It will take a copy of the item and store "
"it in a variable for processing."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:175
msgid "The format of the command:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:181
msgid "Here are some examples:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:198
msgid "Programs can store strings in lists too:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:213
msgid ""
"Lists can even contain other lists. This iterates through each item in "
"the main list, but not in sublists."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:228
msgid ""
"The other way to iterate through a list is to use an index variable and "
"directly access the list rather than through a copy of each item. To use "
"an index variable, the program counts from 0 up to the length of the "
"list. If there are ten elements, the loop must go from 0 to 9 for a total"
" of ten elements."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:233
msgid ""
"The length of a list may be found by using the len function. Combining "
"that with the range function allows the program to loop through the "
"entire list."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:250
msgid ""
"This method is more complex, but is also more powerful. Because we are "
"working directly with the list elements, rather than a copy, the list can"
" be modified. The for-each loop does not allow modification of the "
"original list."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:255
msgid "Adding to a List"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:257
msgid ""
"New items may be added to a list (but not a tuple) by using the append "
"command. For example:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:277
msgid ""
"Side note: If performance while appending is a concern, it is very "
"important to understand how a list is being implemented. For example, if "
"a list is implemented as an *array data type*, then appending an item to "
"the list is a lot like adding a new egg to a full egg carton. A new egg "
"carton must be built with thirteen spots. Then twelve eggs are moved "
"over. Then the thirteenth egg is added. Finally the old egg carton is "
"recycled. Because this can happen behind the scenes in a function, "
"programmers may forget this and let the computer do all the work. It "
"would be more efficient to simply tell the computer to make an egg carton"
" with enough spots to begin with. Thankfully, Python does not implement a"
" list as an array data type. But it is important to pay attention to your"
" next semester data structures class and learn how all of this works."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:289
msgid ""
"To create a list from scratch, it is necessary to create a blank list and"
" then use the append function. This example creates a list based upon "
"user input:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:292
msgid "Creating a list of numbers from user input"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:316
msgid ""
"If a program needs to create an array of a specific length, all with the "
"same value, a simple trick is to use the following code:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:319
msgid "Create an array with 100 zeros"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:327
msgid "Summing or Modifying a List"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:333
msgid ""
"Creating a running total of an array is a common operation. Here's how it"
" is done:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:335
msgid "Summing the values in a list v1"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:354
msgid ""
"The same thing can be done by using a ``for`` loop to iterate the array, "
"rather than count through a range:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:357
msgid "Summing the values in a list v2"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:376
msgid "Numbers in an array can also be changed by using a ``for`` loop:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:378
msgid "Doubling all the numbers in a list"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:394
msgid ""
"However version 2 does not work at doubling the values in an array. Why? "
"Because ``item`` is a *copy* of an element in the array. The code below "
"doubles the copy, not the original array element."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:398
msgid "Bad code that doesn't double all the numbers in a list"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:415
msgid "Slicing Strings"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:421
msgid ""
"Strings are actually lists of characters. They can be treated like lists "
"with each letter a separate item. Run the following code with both "
"versions of x:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:424
msgid "Accessing a string as a list"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:447
msgid ""
"Strings in Python may be used with some of the mathematical operators. "
"Try the following code and see what Python does:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:450
msgid "Adding and multiplying strings"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:463
msgid ""
"It is possible to get a length of a string. It is also possible to do "
"this with any type of array."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:466
msgid "Getting the length of a string or list"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:476
msgid ""
"Since a string is an array, a program can iterate through each character "
"element just like an array:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:484
msgid "Exercise: Starting with the following code:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:492
msgid ""
"Print the three month abbreviation for the month number that the user "
"enters. (Calculate the start position in the string, then use the info we"
" just learned to print out the correct substring.)"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:497
msgid "Secret Codes"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:499
msgid "This code prints out every letter of a string individually:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:513
msgid ""
"Computers do not actually store letters of a string in memory; computers "
"store a series of numbers. Each number represents a letter. The system "
"that computers use to translate numbers to letters is called *Unicode*. "
"The full name for the encoding is Universal Character Set Transformation "
"Format 8-bit, usually abbreviated ``UTF-8``."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:519
msgid ""
"The Unicode chart covers the Western alphabet using the numbers 0-127. "
"Each Western letter is represented by one byte of memory. Other "
"alphabets, like Cyrillic, can take multiple bytes to represent each "
"letter. A partial copy of the Unicode chart is below:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:525
msgid "Value"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:525
msgid "Character"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "40"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "("
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "61"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "="
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "82"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "R"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "103"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:527
msgid "g"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "41"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid ")"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "62"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid ">"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "83"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "S"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "104"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:529
msgid "h"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "42"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "63"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "?"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "84"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "T"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "105"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:531
msgid "i"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "43"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "64"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "@"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "85"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "U"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "106"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:533
msgid "j"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "44"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid ","
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "65"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "A"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "86"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "V"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "107"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:535
msgid "k"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "45"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "66"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "B"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "87"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "W"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "108"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:537
msgid "l"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "46"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "67"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "C"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "88"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:22
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:24
msgid "X"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "109"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:539
msgid "m"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "47"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "68"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "D"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "89"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "Y"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "110"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:541
msgid "n"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "48"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "69"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "E"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "90"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "Z"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "111"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:543
msgid "o"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "49"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "70"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "F"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "91"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "["
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "112"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:545
msgid "p"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "50"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "71"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "G"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "92"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "\\"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "113"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:547
msgid "q"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "51"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "72"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "H"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "93"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "]"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "114"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:549
msgid "r"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "52"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "73"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "I"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "94"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "^"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "115"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:551
msgid "s"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "53"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "74"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "J"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "95"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "_"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "116"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:553
msgid "t"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "54"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "75"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "K"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "96"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "\\`"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "117"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:555
msgid "u"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "55"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "76"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "L"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "97"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "a"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "118"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:557
msgid "v"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "56"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "77"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "M"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "98"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "b"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "119"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:559
msgid "w"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "57"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "9"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "78"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "N"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "99"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "c"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "120"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:561
msgid "x"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "58"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid ":"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "79"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:20
msgid "O"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "100"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "d"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "121"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:563
msgid "y"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "59"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid ";"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "80"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "P"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "101"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "e"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "122"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:565
msgid "z"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "60"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "<"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "81"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "Q"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "102"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:567
msgid "f"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:570
msgid ""
"For more information about ASCII (which has the same values as Unicode "
"for the Western alphabet) see:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:573
msgid "http://en.wikipedia.org/wiki/ASCII"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:575
msgid "For a video that explains the beauty of Unicode, see here:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:577
msgid "http://hackaday.com/2013/09/27/utf-8-the-most-elegant-hack"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:579
msgid ""
"This next set of code converts each of the letters in the prior example "
"to its ordinal value using UTF-8:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:589
msgid ""
"This next program takes each UTF-8 value and adds one to it. Then it "
"prints the new UTF-8 value, then converts the value back to a letter."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:603
msgid ""
"The next code listing takes each UTF-8 value and adds one to it, then "
"converts the value back to a letter."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:608
msgid "simple_encryption.py"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:629
msgid ""
"Finally, the last code takes each UTF-8 value and subtracts one from it, "
"then converts the value back to a letter. By feeding this program the "
"output of the previous program, it serves as a decoder for text encoded "
"by the prior example."
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:635
msgid "simple_decryption.py"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:657
msgid "Associative Arrays"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:659
msgid ""
"Python is not limited to using numbers as an array index. It is also "
"possible to use an associative array. An associative array works like "
"this:"
msgstr ""

#: ../../source/chapters/07_lists/lists.rst:677
msgid ""
"You won't really need associative arrays for this class, but I think it "
"is important to point out that it is possible."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:5
msgid "Introduction to Classes"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:7
msgid ""
"Classes and objects are very powerful programming tools. They make "
"programming easier. In fact, you are already familiar with the concept of"
" classes and objects. A class is a \"classification\" of an object. Like "
"\"person\" or \"image.\" An object is a particular instance of a class. "
"Like \"Mary\" is an instance of \"Person.\""
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:13
msgid ""
"Objects have attributes, such as a person's name, height, and age. "
"Objects also have methods. Methods define what an object can do, like "
"run, jump, or sit."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:17
msgid "Why Learn About Classes?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:23
msgid ""
"Each character in an adventure game needs data: a name, location, "
"strength, are they raising their arm, what direction they are headed, "
"etc. Plus those characters do things. They run, jump, hit, and talk."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:27
msgid "Without classes, our Python code to store this data might look like:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:37
msgid ""
"In order to do anything with this character, we'll need to pass that data"
" to a function:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:45
msgid ""
"Now imagine creating a program that has a set of variables like that for "
"each character, monster, and item in our game. Then we need to create "
"functions that work with those items. We've now waded into a quagmire of "
"data. All of a sudden this doesn't sound like fun at all."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:50
msgid ""
"But wait, it gets worse! As our game expands, we may need to add new "
"fields to describe our character. In this case we've added ``max_speed``:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:65
msgid ""
"In example above, there is only one function. But in a large video game, "
"we might have hundreds of functions that deal with the main character. "
"Adding a new field to help describe what a character has and can do would"
" require us to go through each one of those functions and add it to the "
"parameter list. That would be a lot of work. And perhaps we need to add "
"``max_speed`` to different types of characters like monsters. There needs"
" to be a better way. Somehow our program needs to package up those data "
"fields so they can be managed easily."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:74
msgid "Defining and Creating Simple Classes"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:80
msgid ""
"A better way to manage multiple data attributes is to *define* a "
"structure that has all of the information. Then we can give that "
"\"grouping\" of information a name, like *Character* or *Address*. This "
"can be easily done in Python and any other modern language by using a "
"*class*."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:85
msgid "For example, we can *define* a class representing a character in a game:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:101
msgid ""
"Here's another example, we *define* a class to hold all the fields for an"
" address:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:103
msgid "Define an address class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:118
msgid ""
"In the code above, ``Address`` is the class name. The variables in the "
"class, such as ``name`` and ``city``, are called *attributes* or "
"*fields*. (Note the similarities and differences between declaring a "
"class and declaring a function.)"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:123
msgid ""
"Unlike functions and variables, class names should begin with an upper "
"case letter. While it is possible to begin a class with a lower case "
"letter, it is not considered good practice."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:127
msgid ""
"The ``def __init__(self):`` in a special function called a *constructor* "
"that is run automatically when the class is created. We'll discuss the "
"constructor more in a bit."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:131
msgid ""
"The ``self.`` is kind of like the pronoun *my*. When inside the class "
"``Address`` we are talking about *my* name, *my* city, etc. We don't want"
" to use ``self.`` outside of the class definition for ``Address``, to "
"refer to an ``Address`` field. Why? Because just like the pronoun \"my,\""
" it means someone totally different when said by a different person!"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:137
msgid ""
"To better visualize classes and how they relate, programmers often make "
"diagrams. A diagram for the Address class would look like the figure "
"below. See how the class name is on top with the name of each attribute "
"listed below. To the right of each attribute is the data type, such as "
"string or integer."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:144
#: ../../source/chapters/08_classes/classes.rst:838
msgid "Class Diagram"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:146
msgid ""
"The class code *defines* a class but it does not actually create an "
"*instance* of one. The code told the computer what fields an address has "
"and what the initial default values will be. We don't actually have an "
"address yet though. We can define a class without creating one just like "
"we can define a function without calling it. To create a class and set "
"the fields, look at the example below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:153
msgid "Create an instance of the address class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:168
msgid ""
"An instance of the address class is created in line 2. Note how the class"
" ``Address`` name is used, followed by parentheses. The variable name can"
" be anything that follows normal naming rules."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:172
msgid ""
"To set the fields in the class, a program must use the dot operator. This"
" operator is the period that is between the ``home_address`` and the "
"field name. See how lines 5-10 use the dot operator to set each field "
"value."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:176
msgid ""
"A very common mistake when working with classes is to forget to specify "
"which instance of the class you want to work with. If only one address is"
" created, it is natural to assume the computer will know to use that "
"address you are talking about. This is not the case however. See the "
"example below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:205
msgid ""
"A second address can be created and fields from both instances may be "
"used. See the example below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:208
#: ../../source/chapters/08_classes/classes.rst:279
msgid "Working with two instances of address"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:246
msgid ""
"Line 11 creates the first instance of ``Address``; line 22 creates the "
"second instance. The variable ``home_address`` points to the first "
"instance and ``vacation_home_address`` points to the second."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:250
msgid ""
"Lines 25-30 set the fields in this new class instance. Line 32 prints the"
" city for the home address, because ``home_address`` appears before the "
"dot operator. Line 33 prints the vacation address because "
"``vacation_home_address`` appears before the dot operator."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:255
msgid ""
"In the example Address is called the class because it defines a new "
"classification for a data object. The variables ``home_address`` and "
"``vacation_home_address`` refer to objects because they refer to actual "
"instances of the class ``Address``. A simple definition of an object is "
"that it is an instance of a class. Like \"Bob\" and \"Nancy\" are "
"instances of a Human class."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:262
msgid ""
"By using www.pythontutor.com_ we can `visualize the execution of the "
"code`_ (see below). There are three variables in play. One points to the "
"class definition of ``Address``. The other two variables point to the "
"different address objects and their data."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:272
msgid "Two Addresses"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:274
msgid ""
"Putting lots of data fields into a class makes it easy to pass data in "
"and out of a function. In the code below, the function takes in an "
"address as a parameter and prints it out on the screen. It is not "
"necessary to pass parameters for each field of the address."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:299
msgid "Adding Methods to Classes"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:305
msgid ""
"In addition to attributes, classes may have methods. A method is a "
"function that exists inside of a class. Expanding the earlier example of "
"a ``Dog`` class from the review problem 1 above, the code below adds a "
"method for a dog barking."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:321
msgid ""
"The method definition is contained in lines 7-8 above. Method definitions"
" in a class look almost exactly like function definitions. The big "
"difference is the addition of a parameter ``self`` on line 7. The first "
"parameter of any method in a class must be ``self``. This parameter is "
"required even if the function does not use it."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:327
msgid ""
"Here are the important items to keep in mind when creating methods for "
"classes:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:329
msgid "Attributes should be listed first, methods after."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:330
msgid "The first parameter of any method must be self."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:331
msgid "Method definitions are indented exactly one tab stop."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:333
msgid ""
"Methods may be called in a manner similar to referencing attributes from "
"an object. See the example code below."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:347
msgid ""
"Line 1 creates the dog. Lines 3-5 set the attributes of the object. Line "
"7 calls the ``bark`` function. Note that even through the ``bark`` "
"function has one parameter, ``self``, the call does not pass in anything."
" This is because the first parameter is assumed to be a reference to the "
"dog object itself. Behind the scenes, Python makes a call that looks "
"like:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:358
msgid ""
"If the ``bark`` function needs to make reference to any of the "
"attributes, then it does so using the ``self`` reference variable. For "
"example, we can change the ``Dog`` class so that when the dog barks, it "
"also prints out the dog's name. In the code below, the name attribute is "
"accessed using a dot operator and the ``self`` reference."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:369
msgid ""
"Attributes are adjectives, and methods are verbs. The drawing for the "
"class would look like Figure 12.3."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:373
msgid "Dog Class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:376
msgid "Example: Ball Class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:377
msgid ""
"This example code could be used in Python/Arcade to draw a ball. Having "
"all the parameters contained in a class makes data management easier. The"
" diagram for the ``Ball`` class is shown in the figure below."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:383
msgid "Ball Class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:413
msgid ""
"Below is the code that would go ahead of the main program loop to create "
"a ball and set its attributes:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:426
msgid "This code would go inside the main loop to move and draw the ball:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:435
msgid "References"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:441
msgid ""
"Here's where we separate the true programmers from the want-to-be's. "
"Understanding class references. Take a look at the following code:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:462
msgid ""
"The code above creates two instances of the ``Person()`` class, and using"
" `www.pythontutor.com`_ we can `visualize the two classes`_ in the "
"figure."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:469
msgid "Two Persons"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:471
msgid "The code above has nothing new. But the code below does:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:491
msgid "See the difference on line 10?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:493
msgid ""
"A common misconception when working with objects is to assume that the "
"variable ``bob`` *is* the ``Person`` object. This is not the case. The "
"variable ``bob`` is a *reference* to the ``Person`` object. That is, it "
"stores the memory address of where the object is, and not the object "
"itself."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:498
msgid ""
"If ``bob`` actually was the object, then line 9 could create a *copy* of "
"the object and there would be two objects in existence. The output of the"
" program would show both Bob and Nancy having 100 dollars. But when run, "
"the program outputs the following instead:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:508
msgid ""
"What ``bob`` stores is a *reference* to the object. Besides reference, "
"one may call this *address*, *pointer*, or *handle*. A reference is an "
"address in computer memory for where the object is stored. This address "
"is a hexadecimal number which, if printed out, might look something like "
"``0x1e504``. When line 9 is run, the address is copied rather than the "
"entire object the address points to. See the figure below."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:517
msgid "Class References"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:519
msgid ""
"We can also run this in www.pythontutor.com to see how both of the "
"variables `are pointing to the same object`_."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:525
msgid "One Person, Two Pointers"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:528
msgid "Functions and References"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:529
msgid ""
"Look at the code example below. Line 1 creates a function that takes in a"
" number as a parameter. The variable ``money`` is a variable that "
"contains a copy of the data that was passed in. Adding 100 to that number"
" does not change the number that was stored in ``bob.money`` on line 11. "
"Thus, the print statement on line 14 prints out 100, and not 200."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:553
msgid ""
"`Running on PythonTutor`_ we see that there are two instances of the "
"``money`` variable. One is a copy and local to the give_money1 function."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:560
#: ../../source/chapters/08_classes/classes.rst:583
msgid "Function References"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:562
msgid ""
"Look at the additional code below. This code does cause ``bob.money`` to "
"increase and the ``print`` statement to print 200."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:575
msgid ""
"Why is this? Because ``person`` contains a copy of the memory address of "
"the object, not the actual object itself. One can think of it as a bank "
"account number. The function has a copy of the bank account number, not a"
" copy of the whole bank account. So using the copy of the bank account "
"number to deposit 100 dollars causes Bob's bank account balance to go up."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:585
msgid ""
"Arrays work the same way. A function that takes in an array (list) as a "
"parameter and modifies values in that array will be modifying the same "
"array that the calling code created. The address of the array is copied, "
"not the entire array."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:591
#: ../../source/chapters/08_classes/classes.rst:719
msgid "Review Questions"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:593
msgid ""
"Create a class called ``Cat``. Give it attributes for name, color, and "
"weight. Give it a method called ``meow``."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:595
msgid ""
"Create an instance of the cat class, set the attributes, and call the "
"``meow`` method."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:597
msgid ""
"Create a class called ``Monster``. Give it an attribute for name and an "
"integer attribute for health. Create a method called ``decrease_health`` "
"that takes in a parameter amount and decreases the health by that much. "
"Inside that method, print that the animal died if health goes below zero."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:603
msgid "Constructors"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:609
msgid ""
"There's a terrible problem with our class for Dog listed below. When we "
"create a dog, by default the dog has no name. Dogs should have names! We "
"should not allow dogs to be born and then never be given a name. Yet the "
"code below allows this to happen, and that dog will never have a name."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:620
msgid ""
"Python doesn't want this to happen. That's why Python classes have a "
"special function that is called any time an instance of that class is "
"created. By adding a function called a constructor, a programmer can add "
"code that is automatically run each time an instance of the class is "
"created. See the example constructor code below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:627
msgid "Example of a class with a constructor"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:640
msgid ""
"The constructor starts on line 2. It must be named ``__init__``. There "
"are two underscores before the init, and two underscores after. A common "
"mistake is to only use one."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:644
msgid ""
"The constructor must take in self as the first parameter just like other "
"methods in a class. When the program is run, it will print::"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:649
msgid ""
"When a Dog object is created on line 8, the ``__init__`` function is "
"automatically called and the message is printed to the screen."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:652
msgid "Avoid This Mistake"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:654
msgid ""
"Put everything for a method into just one definition. Don't define it "
"twice. For example:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:670
msgid ""
"The computer will just ignore the first ``__init__`` and go with the last"
" definition. Instead do this:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:684
msgid ""
"A constructor can be used for initializing and setting data for the "
"object. The example Dog class above still allows the name attribute to be"
" left blank after the creation of the dog object. How do we keep this "
"from happening? Many objects need to have values right when they are "
"created. The constructor function can be used to make this happen. See "
"the code below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:690
msgid "Constructor that takes in data to initialize the class"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:710
msgid ""
"On line 3 the constructor function now has an additional parameter named "
"``new_name``. The value of this parameter is used to set the name "
"attribute in the ``Dog`` class on line 8. It is no longer possible to "
"create a ``Dog`` class without a name. The code on line 15 tries this. It"
" will cause a Python error and it will not run. A common mistake is to "
"name the parameter of the ``__init__`` function the same as the attribute"
" and assume that the values will automatically synchronize. This does not"
" happen."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:721
msgid "Should class names begin with an upper or lower case letter?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:722
msgid "Should method names begin with an upper or lower case letter?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:723
msgid "Should attribute names begin with an upper or lower case letter?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:724
msgid "Which should be listed first in a class, attributes or methods?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:725
msgid "What are other names for a reference?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:726
msgid "What is another name for instance variable?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:727
msgid "What is the name for an instance of a class?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:728
msgid ""
"Create a class called Star that will print out \"A star is born!\" every "
"time it is created."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:730
msgid ""
"Create a class called Monster with attributes for health and a name. Add "
"a constructor to the class that sets the health and name of the object "
"with data passed in as parameters."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:735
msgid "Inheritance"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:742
msgid ""
"Another powerful feature of using classes and objects is the ability to "
"make use of *inheritance*. It is possible to create a class and inherit "
"all of the attributes and methods of a *parent class*."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:746
msgid ""
"For example, a program may create a class called ``Boat`` which has all "
"the attributes needed to represent a boat in a game:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:749
msgid "Class definition for a boat"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:773
msgid "To test out our code:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:775
msgid "Floating our boat"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:787
msgid "The output:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:797
msgid ""
"(If you watch the video for this section of the class, you'll note that "
"the \"Boat\" class in the video doesn't actually run. The code above has "
"been corrected but I haven't fixed the video. Use this as a reminder, no "
"matter how simple the code and how experienced the developer, test your "
"code before you deliver it!)"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:803
msgid ""
"Our program also needs a submarine. Our submarine can do everything a "
"boat can, plus we need a command for ``submerge``. Without inheritance we"
" have two options."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:806
msgid ""
"One, add the ``submerge()`` command to our boat. This isn't a great idea "
"because we don't want to give the impression that our boats normally "
"submerge."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:808
msgid ""
"Two, we could create a copy of the ``Boat`` class and call it "
"``Submarine``. In this class we'd add the ``submerge()`` command. This is"
" easy at first, but things become harder if we change the ``Boat`` class."
" A programmer would need to remember that we'd need to change not only "
"the ``Boat`` class, but also make the same changes to the ``Submarine`` "
"class. Keeping this code synchronized is time consuming and error-prone."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:815
msgid ""
"Luckily, there is a better way. Our program can create *child classes* "
"that will inherit all the attributes and methods of the *parent class*. "
"The child classes may then add fields and methods that correspond to "
"their needs. For example:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:827
msgid ""
"Line 1 is the important part. Just by putting ``Boat`` in between the "
"parentheses during the class declaration, we have automatically picked up"
" every attribute and method that is in the Boat class. If we update "
"``Boat``, then the child class ``Submarine`` will automatically get these"
" updates. Inheritance is that easy!"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:833
msgid "The next code example is diagrammed out in the figure below."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:840
msgid "Person, Employee, Customer Classes Examples"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:873
msgid ""
"By placing ``Person`` between the parentheses on lines 5 and 13, the "
"programmer has told the computer that Person is a parent class to both "
"``Employee`` and ``Customer``. This allows the program to set the name "
"attribute on lines 19 and 22."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:878
msgid ""
"Methods are also inherited. Any method the parent has, the child class "
"will have too. But what if we have a method in both the child and parent "
"class?"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:881
msgid ""
"We have two options. We can run them both with ``super()`` keyword. Using"
" ``super()`` followed by a dot operator, and then finally a method name "
"allows you to call the parent's version of the method."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:885
msgid ""
"The code above shows the first option using ``super`` where we run not "
"only the child constructor but also the parent constructor."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:888
msgid ""
"If you are writing a method for a child and want to call a parent method,"
" normally it will be the first statement in the child method. Notice how "
"it is in the example above."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:892
msgid ""
"All constructors should call the parent constructor because then you'd "
"have a child without a parent and that is just sad. In fact, some "
"languages force this rule, but Python doesn't."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:896
msgid ""
"The second option? Methods may be overridden by a child class to provide "
"different functionality. The example below shows both options. The "
"``Employee.report`` overrides the ``Person.report`` because it never "
"calls and runs the parent ``report`` method. The ``Customer`` report does"
" call the parent and the report method in ``Customer`` adds to the "
"``Person`` functionality."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:903
msgid "Overriding constructors"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:954
msgid "Is-A and Has-A Relationships"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:956
msgid ""
"Classes have two main types of relationships. They are \"is a\" and \"has"
" a\" relationships."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:959
msgid ""
"A parent class should always be a more general, abstract version of the "
"child class. This type of child to parent relationship is called an *is "
"a* relationship. For example, a parent class ``Animal`` could have a "
"child class ``Dog``. The dog *is an* animal. The ``Dog`` class could have"
" a child class Poodle. The poodle *is a* dog, and *is an* animal."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:966
msgid ""
"It does not work the other way! A dolphin *is a* mammal, but a mammal is "
"not always a dolphin. So the class ``Dolphin`` should never be a parent "
"to a class ``Mammal``."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:970
msgid ""
"Unrelated items that do not pass the *is a* test should not form "
"parent/child relationships. For example, a class ``Table`` should not be "
"a parent to a class ``Chair`` because a chair is not a table."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:974
msgid ""
"The other type of relationship is the *has a* relationship. These "
"relationships are implemented in code by class attributes. A dog has a "
"name, and so the ``Dog`` class has an attribute for name. Likewise a "
"person could have a dog, and that would be implemented by having the "
"Person class have an attribute for ``Dog``. The ``Person`` class would "
"not derive from ``Dog`` because that would be some kind of insult."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:981
msgid "Looking at the prior code example we can see:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:983
msgid "Employee is a person."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:984
msgid "Customer is a person."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:985
msgid "Person has a name."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:986
msgid "Employee has a job title."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:987
msgid "Customer has an e-mail."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:990
msgid "Static Variables vs. Instance Variables"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:992
msgid ""
"The difference between static and instance variables is confusing. "
"Thankfully it isn't necessary to completely understand the difference "
"right now. But if you stick with programming, it will be. Therefore we "
"will briefly introduce it here."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:997
msgid ""
"There are also some oddities with Python that kept me confused the first "
"several years I've made this book available. So you might see older "
"videos and examples where I get it wrong."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1001
msgid ""
"An *instance variable* is the type of class variable we've used so far. "
"Each instance of the class gets its own value. For example, in a room "
"full of people each person will have their own age. Some of the ages may "
"be the same, but we still need to track each age individually."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1006
msgid ""
"With instance variables, we can't just say \"age\" with a room full of "
"people. We need to specify *whose* age we are talking about. Also, if "
"there are no people in the room, then referring to an age when there are "
"no people to have an age makes no sense."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1011
msgid ""
"With *static variables* the value is the same for every single instance "
"of the class. Even if there are no instances, there still is a value for "
"a static variable. For example, we might have a ``count`` static variable"
" for the number of ``Human`` classes in existence. No humans? The value "
"is zero, but the count variable still exists."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1017
msgid ""
"In the example below, ``ClassA`` creates an instance variable. ``ClassB``"
" creates a static variable."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1047
msgid ""
"In the example above, lines 16 and 17 print out the static variable. Line"
" 17 is the \"proper\" way to do so. Unlike before, we can refer to the "
"class name when using static variables, rather than a variable that "
"points to a particular instance. Because we are working with the class "
"name, by looking at line 17 we instantly can tell we are working with a "
"static variable. Line 16 could be either an instance or static variable. "
"That confusion makes line 17 the better choice."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1055
msgid ""
"Line 22 prints out the instance variable, just like we've done in prior "
"examples. Line 23 will generate an error because each instance of y is "
"different (it is an instance variable after all) and we aren't telling "
"the computer what instance of ``ClassA`` we are talking about."
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1061
msgid "Instance Variables Hiding Static Variables"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1063
msgid ""
"This is one \"feature\" of Python I dislike. It is possible to have a "
"static variable, and an instance variable *with the same name*. Look at "
"the example below:"
msgstr ""

#: ../../source/chapters/08_classes/classes.rst:1107
msgid ""
"Allowing instance variables to hide static variable caused confusion for "
"me for many years!"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:7
msgid "Classes, Animation and User Control"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:9
msgid ""
"We can use a class to represent our program. The Arcade library has a "
"built-in class that represents a window on the screen. We can create our "
"own child class and override functions to handle:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:13
msgid "Start-up and initialization"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:14
msgid "Drawing the items on our screen"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:15
msgid "Animating/Updating the positions of items on our screen"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:16
msgid "Responding to the keyboard"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:17
msgid "Responding to the mouse"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:19
msgid ""
"One of the best ways of learning to program, is to look at sample code. "
"This chapter has several examples designed to learn how to:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:22
msgid "Open a window using an object-oriented approach"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:23
msgid "Animating objects"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:24
msgid "Moving objects with the mouse"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:25
msgid "Moving objects with the keyboard"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:26
msgid "Moving objects with the joystick"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:29
msgid "Creating a Window with a Class"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:31
msgid "Up to now, we have used a function to open a window. Here's the code:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:33
msgid "open_window_with_function.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:38
msgid ""
"We can also use an object to open a window. The code is rather straight-"
"forward."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:40
msgid "open_window_with_object.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:45
msgid ""
"Function calls, and calls to create an instance of an object look very "
"similar. The tell-tale clue that we are creating an instance of an object"
" in the second example is the fact that ``Window`` is capitalized."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:50
msgid "Extending the Window Class"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:52
msgid ""
"Arcade's ``Window`` class has a lot of built-in methods that are "
"automatically called when needed. Methods for drawing, for responding to "
"the keyboard, the mouse, and more. You can see all the methods by looking"
" at the `Window Class Documentation`_. But by default, these methods "
"don't do anything. We need to change that."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:59
msgid ""
"As we learned from the prior chapter, we can extend the functionality of "
"a class by creating a child class. Therefore, we can extend the "
"``Window`` class by creating a child class of it. I'm going to call my "
"child class ``MyApplication``."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:66
msgid "extending_window_class.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:72
msgid "Drawing with the Window Class"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:74
msgid ""
"To draw with the ``Window`` class, we need to create our own method "
"called ``on_draw``. This will override the default method built into the "
"``Window`` class. We will put our drawing code in there."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:78
msgid ""
"We also need to set the background color. Since we only need to do this "
"once, we will do that in the ``__init__`` method."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:81
msgid "drawing.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:86
msgid "The result of this program just looks like:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:91
msgid "Animating"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:93
msgid ""
"By overriding the ``animate`` method, we can update our ball position and"
" animate our scene:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:96
msgid "simple_animation.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:102
msgid "Encapsulating Our Animation Object"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:104
msgid ""
"It doesn't take much imagination to realize that adding more parameters "
"to the ball, getting it to bounce, or even having several balls on the "
"screen would make our ``MyApplication`` class very complex."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:108
msgid ""
"If only there was a way to encapsulate all that \"ball\" stuff together. "
"Wait! There is! Using classes!"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:111
msgid ""
"Here is a more complex example, but all the logic for the ball has been "
"moved into a new ``Ball`` class."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:114
msgid "ball_class_example.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:119
msgid "Here it is in action:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:124
msgid "Animating a List"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:126
msgid ""
"Wouldn't it be nice to animate multiple items? How do we track multiple "
"items? With a list! This takes our previous example and animates three "
"balls at once."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:129
msgid "ball_list_example.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:137
msgid "User Control"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:139
msgid ""
"How do we interact with the user? Get the user to move an object on the "
"screen?"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:141
msgid ""
"We can do this with the mouse, with the keyboard, or with the game "
"controller."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:144
msgid "Move with the Mouse"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:146
msgid ""
"The key to managing mouse motion to override the ``on_mouse_motion`` in "
"the ``arcade.Window`` class. That method is called every time the mouse "
"moves. The method definition looks like this:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:154
msgid ""
"The ``x`` and ``y`` are the coordinates of the mouse. the ``dx`` and "
"``dy`` represent the change in x and y since the last time the method was"
" called."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:157
msgid ""
"Often when controlling a graphical item on the screen with the mouse, we "
"do not want to see the mouse pointer. If you don't want to see the mouse "
"pointer, in the ``__init__`` method, call the following method in the "
"parent class:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:165
msgid ""
"The example below takes our ``Ball`` class, and moves it around the "
"screen with the mouse."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:168
msgid "move_with_mouse.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:176
msgid "Mouse Clicks"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:178
msgid ""
"You can also process mouse clicks by defining an ``on_mouse_press`` "
"method:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:191
msgid "Move with the Keyboard"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:193
msgid ""
"Moving with the game controller is similar to our bouncing ball example. "
"There are just two differences:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:196
msgid "We control the ``change_x`` and ``change_y`` with the keyboard"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:197
msgid "When we hit the edge of the screen we stop, rather than bounce."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:199
msgid ""
"To detect when a key is hit, we override the ``on_key_press`` method. We "
"might think of hitting a key as one event. But it is actually two. When "
"the key is pressed, we start moving. When the key is released we stop "
"moving. That makes for two events. Releasing a key is controlled by "
"``on_key_release``."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:204
msgid ""
"These methods have a  ``key`` variable as a parameter that can be "
"compared with an ``if`` statement to the values in the `arcade.key "
"library <http://arcade.academy/arcade.key.html>`_."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:216
msgid ""
"We detect the edge by comparing ``position_x`` with the left and right "
"side of the screen For example:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:223
msgid ""
"But this isn't perfect. Because the position specifies the *center* of "
"the ball, by the time the x coordinate is 0 we are already have off the "
"screen. It is better to compare it to the ball's radius:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:231
msgid "What do we do once it hits the edge? Just set the value back to the edge:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:239
msgid "Here's a full example:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:241
msgid "move_with_keyboard.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:247
msgid "Moving with the Game Controller"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:249
msgid ""
"Working with game controllers is a bit more complex. A computer might not"
" have any game controllers, or it might have five controllers plugged in."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:252
msgid ""
"We can get a list of all game pads that are plugged in with the "
"``get_joysticks`` function. This will either return a list, or it will "
"return nothing at all if there are no game pads."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:256
msgid ""
"Below is a block of code that can be put in an ``__init__`` method for "
"your application that will create an instance variable to represent a "
"game pad if one exists."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:270
msgid ""
"After this, you can get the position of the game controller joystick by "
"calling ``self.joystick.x`` and ``self.joystick.y``. The values will be "
"between -1 and +1, with 0 being a centered joystick. Kind of."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:274
msgid ""
"Actually, a centered joystick might have a value not at 0, but at 0.0001 "
"or some small number. This will make for a small \"drift\" on a person's "
"character. We often counteract this by having a \"dead zone\" where if "
"the number is below a certain value, we just assume it is zero to "
"eliminate the drift."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:279
msgid ""
"If you want to move faster than one pixel per frame, then just multiply "
"the ``self.joystick.x`` times five and you'll be going five times faster."
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:282
msgid "Here is a full example:"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:284
msgid "move_with_game_controller.py"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:290
msgid "Starting Template"
msgstr ""

#: ../../source/chapters/09_user_control/user_control.rst:292
msgid "http://arcade.academy/examples/starting_template.html"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:7
msgid "Sound Effects"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:9
msgid "Adding sound to your game isn't too hard. There are two steps:"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:11
msgid "Load the sound"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:12
msgid "Play the sound"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:14
msgid ""
"For these examples, I'm using a sound file called ``laser.ogg`` that you "
"can `download here <../../_static/laser.ogg>`_. Make sure you save the "
"file in the same directory as any Python program that tries to use it."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:19
msgid "Loading Sounds"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:21
msgid ""
"The code below creates a new variable called ``laser_sound``. It calls "
"arcades ``load_sound`` function. It passes the filename of our sound."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:28
msgid ""
"For this to work, you need to have a sound downloaded and named "
"``laser.ogg`` in the same directory as your Python file. The computer "
"will not find the sound if it is in a different directory."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:32
msgid ""
"This loads the sound, but does not play it. We only want to load the "
"sound once. We don't want to load the sound off the disk every time we "
"play it. It can be kept in memory."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:37
msgid "Playing Sounds"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:39
msgid ""
"The code to play sounds is straight-forward. Just call the ``play_sound``"
" function, and pass in the variable that we set equal to the sound we "
"loaded:"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:46
msgid "Putting the two together, you might think we could do this to play sounds:"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:55
msgid ""
"But that doesn't work. The program ends before the sound has a chance to "
"play. The ``play_sound`` button doesn't pause while the sound plays, it "
"returns right away and keeps going. This was a similar issue that we had "
"when we opened a window, and we can solve it the same way:"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:69
msgid ""
"For this reason, I recommend loading the sound in the ``__init__`` method"
" of the class that will play the sound."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:73
msgid "Triggering Sounds"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:75
msgid ""
"We want to play the sound when something happens. So this example loads "
"the sound once during the ``__init__``. When the user hits the space bar,"
" that is when we trigger the sound to play."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:106
msgid "Finding Sounds"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:108
msgid "Great places to find free sounds to use in your program:"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:110
msgid ""
"`OpenGameArt.org <http://opengameart.org/art-search-"
"advanced?keys=&field_art_type_tid%5B%5D=13&sort_by=count&sort_order=DESC>`_"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:111
msgid ""
"`www.freesound.org <http://www.freesound.org/>`_ is ok, but requires a "
"login, which is a pain."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:113
msgid ""
"`Kenney.nl <http://kenney.nl/assets?q=audio>`_ has a few free sound packs"
" you can download, and several that are cheap."
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:117
msgid "Sound File Formats"
msgstr ""

#: ../../source/chapters/10_sounds/sounds.rst:119
msgid ""
"Arcade should be able to play files in either the mp3 or ogg format. If "
"you need to test or convert file types, use a sound editor program like "
"Audacity."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:7
msgid "Sprites"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:9
msgid ""
"Our games need support for handling objects that collide. Balls bouncing "
"off paddles, laser beams hitting aliens, or our favorite character "
"collecting a coin. All these examples require collision detection."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:13
msgid ""
"The Arcade library has support for sprites. A sprite is a two dimensional"
" image that is part of the larger graphical scene. Typically a sprite "
"will be some kind of object in the scene that will be interacted with "
"like a car, frog, or little plumber guy."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:21
msgid ""
"Originally, video game consoles had built-in hardware support for "
"sprites. Now this specialized hardware support is no longer needed, but "
"we still use the term \"sprite.\" The `history of sprites`_ is "
"interesting, if you want to read up more about it."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:29
msgid "Basic Sprites and Collisions"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:31
msgid ""
"Let's step through an example program that uses sprites. This example "
"shows how to create a screen of sprites that are coins, and collect them "
"using a sprite that is a character image controlled by the mouse as shown"
" in the figure below. The program keeps \"score\" on how many coins have "
"been collected. The code for this example may be found at:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:37
#: ../../source/chapters/11_sprites/sprites.rst:366
msgid "http://arcade.academy/examples/sprite_collect_coins.html"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:39
msgid "In this chapter, we'll step through that example."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:43
msgid "Example Sprite Game"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:46
msgid "Getting the Application Started"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:48
msgid ""
"The first few lines of our program start off like other games we've done."
" We import a couple libraries. Set a couple constants for the size of the"
" screen, and a new constant that we will use to scale our graphics to "
"half their original size."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:53
msgid "Start of our sprite example"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:74
msgid "The Constructor"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:76
msgid ""
"What's next? We need to add our methods to the ``MyApplication`` class. "
"We'll start with our ``__init__`` method. This is the method we use to "
"initialize our variables. Here it is:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:80
msgid "Constructor for MyApplication"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:102
msgid "The variables we are creating:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:104
msgid ""
"``all_sprites_list``:  This is a special list that we will add all our "
"sprites to. By having all the sprites in a single list, we can draw them "
"all in a single command."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:107
msgid ""
"``coin_list``: This is a list of all the coins. We wille be checking if "
"the player touches any sprite in this list."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:109
msgid ""
"``player_sprite``: This points to our player's sprite. It is the sprite "
"we will move, and we'll check to see if it"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:111
msgid "``score``: This keeps track of our score."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:113
msgid ""
"We use a command built into the parent ``Window`` class called "
"``set_mouse_visible`` to make the mouse not visible. Finally we set the "
"background color."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:118
msgid "The Setup Function"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:120
msgid ""
"Next up, we have a ``setup`` method. In the first code example, we have "
"the code that calls this function near the end: ``window.setup()``."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:123
msgid ""
"This setup code could be moved into the ``__init__`` method. Why is it "
"separate? Later on if we want to add the ability to \"play again\", we "
"can just call the ``setup`` function. If the code to set up the window is"
" mixed with the code to set up the game, then it is more difficult to "
"program that functionality. Here we start by keeping them separate."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:130
msgid "Setup method for our application"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:160
msgid "How does this code work?"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:162
msgid ""
"First, we need some lists to hold our sprites. We could do something like"
" this:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:169
msgid ""
"But wait! ``all_sprites_list`` is an instance variable that's part of our"
" class. we need to prepend it with ``self.``."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:176
msgid ""
"However, the Arcade library has a class especially for handling sprite "
"lists. This class is called ``SpriteList``. So instead of creating an "
"empty list with ``[]``, we will create a new instance of the "
"``SpriteList`` class:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:184
msgid ""
"Except that doesn't work. Why? ``SpriteList`` is in the Arcade library. "
"We need to prepend any reference to things in the Arcade library with "
"``arcade`` of course, so now we have:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:192
msgid ""
"We need a separate list for just coins. This list won't have the player. "
"We also need to reset our score to 0."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:201
msgid ""
"Now we need to create out sprite. The name of the class that represents "
"sprites is called ``Sprite``. It takes two paramters. A path to the image"
" we will be using, and how big to scale it."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:209
msgid ""
"Ok, so if you are following along, you'll need to download the images. "
"You can right-click on the two images below and save them. The images "
"come from `kenney.nl`_ who has a lot of free and cheap game image assets "
"that you can use in your games."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:218
msgid "character.png"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:222
msgid "coin_01.png"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:224
msgid ""
"Where should you save them? It depends. If you load your sprite with the "
"code below, the computer will look for the ``character.png`` image in the"
" same directory as your Python file. Save the image anywhere else, and it"
" won't be found."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:233
msgid ""
"I don't like putting my images with my code. By the time I finish a game "
"there's a lot of images, sounds, and other files all mixed together. "
"Instead I like to create subdirectories for images and sounds. You can do"
" this by creating a subdirectory called \"images\" and them prepending "
"\"images/\" to your filename."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:243
msgid "The On Draw Method"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:245
msgid ""
"How do we draw all our sprites? Really easy. We just override the "
"``on_draw`` method and call the ``draw`` method in our sprites list. That"
" method will loop throug all our sprites for us, and draw them."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:258
msgid "Woohoo! That was easy."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:260
msgid ""
"In addition to drawing the sprites, let's go ahead and put the score on "
"the screen:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:269
msgid ""
"Rather than do that ``\"Score: \" + str(self.score)`` it is possible to "
"do print formatting if you are using Python 3.6 or later. We'll talk more"
" about print formatting later, but that code would look like:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:279
msgid ""
"There are three standards for how to format strings in Python, so that "
"whole subject is a bit confusing."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:283
msgid "The On Mouse Motion Method"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:285
msgid ""
"Moving the player sprite with the mouse is easy. All sprites have "
"instance variables ``center_x`` and ``center_y``. Just change those "
"values to the mouse's x and y location to move the sprite."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:297
msgid "The Animate Method"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:299
msgid "Our ``animate`` method needs to do three things:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:301
msgid "Update the sprites"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:302
msgid "Check to see if the player is touching any coins"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:303
msgid "Remove any coins colliding with the player, and update the score."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:305
msgid ""
"Each sprite has its own ``update`` method. This allows sprites to move "
"and animate its images. Right now, our sprite does not have this method. "
"But we will soon. Rather than call the ``update`` method of each sprite "
"we have, there is an ``update`` method in each sprite list that will call"
" ``update`` on each sprite in the list. Therefore, just calling "
"``update`` with our ``all_sprites_list`` will cause all sprites to "
"update."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:316
msgid ""
"How do we detect what coins are touching the player? We call the "
"``check_for_collision_with_list`` method. Pass it in our player sprite, "
"along with a list of all the coins. That function will return a list of "
"all colliding sprites. If no sprites collide, the list will be empty."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:327
msgid ""
"What do we do with this ``hit_list`` we get back? We loop through it. We "
"add one to the score for each sprite hit."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:330
msgid ""
"We also need to get rid of the sprite. The sprite class has a method "
"called ``kill``. This method will remove the sprite from existance."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:340
msgid "Here's the whole ``animate`` method put together:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:361
msgid "Moving Sprites"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:363
msgid ""
"How do we get sprites to move? Start the code from our original example "
"here:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:368
msgid ""
"To customize our sprite's behavior, we need to subclass the ``Sprite`` "
"class with our own child class. This is easy:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:375
msgid ""
"We need to provide each sprite with a ``update`` method. The ``update`` "
"method is automatically called to update the sprite's position."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:386
msgid ""
"Wait! We have a new class called Coin, but we aren't using it. Find in "
"our original code this line:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:393
msgid ""
"See how it is creating an instance of ``Sprite``? We want to create an "
"instance of our new ``Coin`` class instead:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:400
msgid "Now, how do we get the coin to move?"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:403
msgid "Moving Sprites Down"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:405
msgid ""
"To get the sprites to \"fall\" down the screen, we need to make their y "
"location smaller. This is easy. Over-ride ``update`` in the sprite and "
"subtract from y each frame:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:416
msgid ""
"This causes the coins to move down. But once they move off the screen "
"they keep going into negative-coordinate land. We can't see them any "
"more. Sad."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:421
msgid "Coins moving down"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:423
msgid ""
"We can get around this by resetting the coins up to the top. Here's how "
"its done:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:437
msgid ""
"But this isn't perfect. Because if your eyes are fast, you can see the "
"coin 'pop' in and out of existence at the edge. It doesn't smoothly slide"
" off. This is because we move it when the *center* of the coin is at the "
"edge. Not the top of the coin has slid off."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:442
msgid ""
"There are a couple ways we can do this. Here's one. We'll check at -20 "
"instead of 0. As long as the coin radius is 20 or less, we are good."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:456
msgid ""
"There's another way. In addition to ``center_y``, sprites have other "
"members that are useful in these cases. They are ``top``, ``bottom``, "
"``left`` and ``right``. So we can do this:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:471
msgid ""
"Doing this allows the coins to smoothly slide on and off the screen. But "
"since they reappear at the top, we get repeating patters. See the image "
"below:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:476
msgid "Coins repeating in a pattern"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:478
msgid "Instead we can randomize it a bit:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:495
msgid ""
"This works, but when we we collect all the coins we are done. What if it "
"was a never-ending set of coins? Instead of \"killing\" the coin, let's "
"reset it to the top of the screen."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:516
msgid ""
"We can even take that common code, and move it to a method. Here's a full"
" example:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:518
msgid "sprites_move_down.py"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:524
msgid "Bouncing"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:528
msgid "Coins bouncing around"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:530
msgid "sprites_bouncing.py"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:535
msgid ""
"Take what you've learned from the example above, and see if you can "
"replicate this:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:540
msgid "Test Pattern"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:543
msgid "Circles"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:547
msgid "Coins moving in a circle"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:549
msgid "sprites_circle.py"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:555
msgid "Rotating Sprites"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:557
msgid ""
"Sprites can easily be rotated by setting their ``angle`` attribute. "
"Angles are in degrees. So the following will flip the player upside down:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:564
msgid ""
"If you put this in the coin's ``animate`` method, it would cause the "
"coins to spin:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:577
msgid "Using Sprites to Shoot"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:579
msgid "How do we get sprites that we can shoot?"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:581
msgid "First, we need a 'shooting' image:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:585
msgid "laserBlue01.png"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:589
msgid "Coins shooting"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:591
msgid ""
"To start with, we need a sprite to represent the bullet. It will be a "
"moving sprite:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:600
msgid ""
"This gets the bullets to move up. But we don't have any bullets. We need "
"to create bullets when the user presses the mouse button. We can add an "
"``on_mouse_press`` method to do something when the user presses the mouse"
" button:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:623
msgid ""
"The two key points with the code above is that 1.) We position the bullet"
" right above the player that spawned it:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:631
msgid ""
"And two, we can rotate a sprite! Since the bullet image has the bullet "
"going sideways, that's no good. There is an attribute with any sprite  "
"that you can set called ``angle``. So we just set the angle to 90 to "
"rotate it."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:639
msgid ""
"Now that we have bullets, how do we get them to collide with the coins? "
"We add the following to our applications ``animate`` method:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:664
msgid ""
"We loop through each bullet with a ``for`` loop. Then we check to see if "
"the bullet is hitting any of the coins. If it is, we get rid of the coin."
" We get rid of the bullet."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:668
msgid ""
"We also check to see if the bullet flies off the top of the screen. If it"
" does, we get rid of the bullet. This is easy to forget, but if you do, "
"it will cause the computer to slow down because you are tracking "
"thousands of bullets that have long ago left the space we care about."
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:673
#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:95
msgid "Here's the full example:"
msgstr ""

#: ../../source/chapters/11_sprites/sprites.rst:675
msgid "sprites_bullet.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:7
msgid "Review"
msgstr ""

#: ../../source/chapters/12_review/review.rst:9
msgid "test_01.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:14
msgid "test_02.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:19
msgid "test_03.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:24
msgid "test_04.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:29
msgid "test_05.py"
msgstr ""

#: ../../source/chapters/12_review/review.rst:34
msgid "test_06.py"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:7
msgid "Sprites and Walls"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:9
msgid ""
"(Note: Show how to place individual blocks. Blocks in a row, in a column."
" Use a list.)"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:12
msgid "The Simple Physics Engine"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:14
msgid ""
"Many games with sprites often have \"walls\" that the character can't "
"move through. There are rather straight-forward to create."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:17
msgid ""
"To begin with, let's get a couple images. Our character, and a box that "
"will act as a blocking wall. Both images are from `kenney.nl`_."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:25
msgid "images/character.png"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:30
msgid "images/boxCrate_double.png"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:32
msgid ""
"In our ``setup`` method, we can create a row of box sprites using a "
"``for`` loop. In the code below, our y value is always 200, and we change"
" the x value from 173 to 650. We put a box every 64 pixels because each "
"box happens to be 64 pixels wide."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:46
msgid ""
"The Arcade Library has a built in \"physics engine.\" A physics engine "
"handles the interactions between the virtual physical objects in the "
"game. For example, a physics engine might be several balls running into "
"each other, a character sliding down a hill, or a car making a turn on "
"the road."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:51
msgid ""
"Physics engines have made impressive gains on what they can simulate. For"
" our game, we'll just keep things simple and make sure our character "
"can't walk through walls."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:55
msgid ""
"We can create the physics engine in our ``setup`` method with the "
"following code:"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:62
msgid ""
"This identifies the player character (``player_sprite``), and a list of "
"sprites (``wall_list``) that the player character isn't allowed to pass "
"through."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:69
msgid ""
"Before, we updated all the sprites with a "
"``self.all_sprites_list.update()`` command. With the physics engine, we "
"will instead update the sprites by using the physics engine's update::"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:75
msgid "The simple physics engine follows the following algorithm:"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:77
msgid ""
"Move the player in the x direction according to the player's ``change_x``"
" value."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:79
msgid ""
"Check the player against the wall list and see if there are any "
"collisions."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:80
msgid "If the player is colliding:"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:82
msgid ""
"If the player is moving right, set the player's right edge to the wall's "
"left edge."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:84
msgid ""
"If the player is moving left, set the player's left edge to the wall's "
"right edge."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:86
msgid ""
"If the player isn't moving left or right, print out a message that we are"
" confused how we hit something when we aren't moving."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:89
msgid "Then we just do the same thing, except with the y coordinates."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:91
msgid "You can see the `physics engine source code`_ on GitHub."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:97
msgid "sprite_move_walls.py"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:103
msgid "Using a View Port for Scrolling"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:105
msgid ""
"What if one screen isn't enough to hold your maze of walls? We can have a"
" world that is larger than just our window. We do this by adjusting the "
"*view port*. Normally coordinate (0, 0) is the lower left corner of our "
"screen. We can change that! We could have an entire world stretch from "
"(0, 0) to (3000, 3000), and have a smaller view port that was 800x640 "
"that scrolled around that."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:112
msgid ""
"The command for using the view port is ``set_viewport``. This command "
"takes four arguments. The first two are the left and bottom boundaries of"
" the window. By default these are zero. That is why (0, 0) is in the "
"lower left of the screen. The next two commands are the top and right "
"coordinates of the screen. By default these are the screen width and "
"height, minus one. So an 800 pixel-wide window would have x-coordinates "
"from 0 - 799."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:119
msgid ""
"A command like this would shift the whole \"view\" of the window 200 "
"pixels to the right:"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:126
msgid ""
"So with a 800 wide pixel window, we would show x-coordinates 200 - 999 "
"instead of 0 - 799."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:129
msgid ""
"Instead of hard-coding the shift at 200 pixels, we need to use a variable"
" and have rules around when to shift the view. In our next example, we "
"will create two new instance variables in our application class that hold"
" the left and bottom coordinates for our view port. We'll default to "
"zero."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:140
msgid ""
"We are also going to create two new constants. We don't want the player "
"to reach the edge of the screen before we start scrolling. Because then "
"the player would have no idea where she is going. In our example we will "
"set a \"margin\" of 40 pixels. When the player is 40 pixels from the edge"
" of the screen, we'll move the view port so she can see at least 40 "
"pixels around her."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:150
msgid ""
"Next, in our update method, we need to see if the user has moved too "
"close to the edge of the screen and we need to update the boundaries."
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:197
msgid "The full example is below:"
msgstr ""

#: ../../source/chapters/13_sprites_and_walls/sprites_and_walls.rst:199
msgid "sprite_move_scrolling.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:5
msgid "Libraries and Modules"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:10
msgid ""
"A *library* is a collection of code for functions and classes. Often, "
"these libraries are written by someone else and brought into the project "
"so that the programmer does not have to \"reinvent the wheel.\" In Python"
" the term used to describe a library of code is module."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:15
msgid ""
"By using ``import pygame`` and ``import random``, the programs created so"
" far have already used modules. A library can be made up of multiple "
"modules that can be imported. Often a library only has one module, so "
"these words can sometimes be used interchangeably."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:20
msgid ""
"Modules are often organized into groups of similar functionality. In this"
" class programs have already used functions from the ``math`` module, the"
" ``random`` module, and the ``arcade`` library. Modules can be organized "
"so that individual modules contain other modules. For example, the "
"``arcade`` module contains submodules for ``arcade.key``, and "
"``arcade.color``."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:26
msgid ""
"Modules are not loaded unless the program asks them to. This saves time "
"and computer memory. This chapter shows how to create a module, and how "
"to import and use that module."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:31
msgid "Why Create a Library?"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:33
msgid ""
"There are three major reasons for a programmer to create his or her own "
"libraries:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:36
msgid "It breaks the code into smaller, easier to use parts."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:37
msgid "It allows multiple people to work on a program at the same time."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:38
msgid "The code written can be easily shared with other programmers."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:40
msgid ""
"Some of the programs already created in this book have started to get "
"rather long. By separating a large program into several smaller programs,"
" it is easier to manage the code. For example, in the prior chapter's "
"sprite example, a programmer could move the sprite class into a separate "
"file. In a complex program, each sprite might be contained in its own "
"file."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:46
msgid ""
"If multiple programmers work on the same project, it is nearly impossible"
" to do so if all the code is in one file. However, by breaking the "
"program into multiple pieces, it becomes easier. One programmer could "
"work on developing an \"Orc\" sprite class. Another programmer could work"
" on the \"Goblin\" sprite class. Since the sprites are in separate files,"
" the programmers do not run into conflict."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:53
msgid ""
"Modern programmers rarely build programs from scratch. Often programs are"
" built from parts of other programs that share the same functionality. If"
" one programmer creates code that can handle a mortgage application form,"
" that code will ideally go into a library. Then any other program that "
"needs to manage a mortgage application form at that bank can call on that"
" library."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:60
msgid "Creating Your Own Module/Library File"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:66
msgid "Video: Libraries"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:68
msgid ""
"In this example we will break apart a short program into multiple files. "
"Here we have a function in a file named ``test.py``, and a call to that "
"function:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:71
msgid "test.py with everything in it"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:82
msgid ""
"Yes, this program is not too long to be in one file. But if both the "
"function and the main program code were long, it would be different. If "
"we had several functions, each 100 lines long, it would be time consuming"
" to manage that large of a file. But for this example we will keep the "
"code short for clarity."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:87
msgid ""
"We can move the ``foo`` function out of this file. Then this file would "
"be left with only the main program code. (In this example there is no "
"reason to separate them, aside from learning how to do so.)"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:91
msgid ""
"To do this, create a new file and copy the ``foo`` function into it. Save"
" the new file with the name ``my_functions.py``. The file must be saved "
"to the same directory as ``test.py``."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:95
msgid "my_functions.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:103
msgid "test.py that doesn't work"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:110
msgid ""
"Unfortunately it isn't as simple as this. The file ``test.py`` does not "
"know to go and look at the ``my_functions.py`` file and import it. We "
"have to add the command to import it:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:114
msgid "test.py that imports but still doesn't work"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:124
msgid ""
"That still doesn't work. What are we missing? Just like when we import "
"pygame, we have to put the package name in front of the function. Like "
"this:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:127
msgid "test.py that finally works"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:137
msgid "This works because ``my_functions.`` is prepended to the function call."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:140
msgid "Namespace"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:146
msgid "Video: Namespace"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:148
msgid ""
"A program might have two library files that need to be used. What if the "
"libraries had functions that were named the same? What if there were two "
"functions named print_report, one that printed grades, and one that "
"printed an account statement? For instance:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:153
msgid "student_functions.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:160
msgid "financial_functions.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:167
msgid ""
"How do you get a program to specify which function to call? Well, that is"
" pretty easy. You specify the *namespace*. The namespace is the work that"
" appears before the function name in the code below:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:171
msgid "test.py that calls different print_report functions"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:181
msgid ""
"So now we can see why this might be needed. But what if you don't have "
"name collisions? Typing in a namespace each and every time can be "
"tiresome. You can get around this by importing the library into the "
"*local namespace*. The local namespace is a list of functions, variables,"
" and classes that you don't have to prepend with a namespace. Going back "
"to the ``foo`` example, let's remove the original import and replace it "
"with a new type of import:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:188
msgid "test.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:197
msgid ""
"This works even without ``my_functions.`` prepended to the function call."
" The asterisk is a wildcard that will import all functions from "
"``my_functions``. A programmer could import individual ones if desired by"
" specifying the function name."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:203
msgid "Third Party Libraries"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:205
msgid ""
"When working with Python, it is possible to use many libraries that are "
"built into Python. Take a look at all the libraries that are available "
"here:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:208
msgid "http://docs.python.org/3/py-modindex.html"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:210
msgid ""
"It is possible to download and install other libraries. There are "
"libraries that work with the web, complex numbers, databases, and more."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:213
msgid "Pygame: The library used to create games. http://www.pygame.org/docs/"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:214
msgid ""
"wxPython: Create GUI programs, with windows, menus, and more. "
"http://www.wxpython.org/"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:215
msgid ""
"pydot: Generate complex directed and non-directed graphs "
"http://code.google.com/p/pydot/"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:216
msgid ""
"NumPy: Sophisticated library for working with matrices. "
"http://numpy.scipy.org/"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:218
msgid ""
"A wonderful list of Python libraries and links to installers for them is "
"available here:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:220
msgid "http://www.lfd.uci.edu/~gohlke/pythonlibs/"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:222
msgid ""
"Going through lists of libraries that are available can help you "
"brainstorm what types of programs you can create. Most programming "
"involves assembling large parts, rather than writing everything from "
"scratch."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:227
msgid "Examples: OpenPyXL Library"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:229
msgid ""
"This example uses a library called OpenPyXL to write an Excel file. It is"
" also easy to read from an Excel file. You can install OpenPyXL from the "
"Windows command prompt by typing ``pip install openpyxl``. If you are on "
"the Mac or a Linux machine, you can type ``sudo pip3 install openpyxl``."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:235
msgid "openpyxl_example.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:240
msgid "The output of this program is an Excel file:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:245
msgid "Examples: Beautiful Soup Library"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:247
msgid ""
"This example grabs information off a web page. You can install Beautiful "
"Soup from the Windows command prompt by typing ``pip install bs4``. If "
"you are on the Mac or a Linux machine, you can type ``sudo pip3 install "
"bs4``."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:252
msgid "bs4_example.py"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:258
msgid "Examples: Matplotlib Library"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:259
msgid ""
"Here is an example of what you can do with the third party library "
"\"Matplotlib.\" You can install Matplotlib from the Windows command "
"prompt by typing ``pip install matplotlib``. If you are on the Mac or a "
"Linux machine, you can type ``pip3 install matplotlib``. To start with, "
"here is the code to create a simple line chart with four values:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:268
msgid "Simple Line Graph"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:275
msgid ""
"Note that you can zoom in, pan, and save the graph. You can even save the"
" graph in vector formats like ps and svg that import into documents "
"without loss of quality like raster graphics would have."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:279
msgid ""
"The x value for Example 1, defaults to start at zero. You can change this"
" default and specify your own x values to go with the y values. See "
"Example 2 below."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:286
msgid "Specifying the x values"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:293
msgid "It is trivial to add another data series to the graph."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:298
msgid "Graphing two data series"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:305
msgid "You can add a legend to the graph:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:310
msgid "Adding a legend"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:317
msgid "You can add annotations to a graph:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:322
msgid "Adding annotations"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:329
msgid ""
"Don't like the default lines styles for the graph? That can be changed by"
" adding a third parameter to the plot command."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:335
msgid "Specifying the line style"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:342
msgid "A bar chart is as easy as changing plot to bar."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:347
msgid "Bar chart"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:354
msgid "You can add labels to axis values."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:359
msgid "X-axis labels"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:366
msgid ""
"You can graph functions as well. This uses a different package called "
"numpy to graph a sine function."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:372
msgid "Graphing a sine function"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:379
msgid "You can fill in a graph if you like."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:384
msgid "Filling in a graph"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:391
msgid "Create a pie chart."
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:396
msgid "Pie chart"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:403
msgid ""
"You can do really fancy things, like pull stock data from the web and "
"create a candlestick graph for Apple Computer:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:409
msgid "Candlestick chart"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:416
msgid ""
"There are many more things that can be done with matplotlib. Take a look "
"at the thumbnail gallery:"
msgstr ""

#: ../../source/chapters/14_libraries_and_modules/libraries_and_modules.rst:419
msgid "http://matplotlib.org/gallery.html"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:5
msgid "Searching"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:7
msgid ""
"Searching is an important and very common operation that computers do all"
" the time. Searches are used every time someone does a ctrl-f for "
"\"find\", when a user uses \"type-to\" to quickly select an item, or when"
" a web server pulls information about a customer to present a customized "
"web page with the customer's order."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:16
msgid ""
"There are a lot of ways to search for data. Google has based an entire "
"multi-billion dollar company on this fact. This chapter introduces the "
"two simplest methods for searching, the linear search and the binary "
"search."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:21
msgid "Reading From a File"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:27
msgid ""
"Before discussing how to search we need to learn how to read data from a "
"file. Reading in a data set from a file is way more fun than typing it in"
" by hand each time."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:31
msgid ""
"Let's say we need to create a program that will allow us to quickly find "
"the name of a super-villain. To start with, our program needs a database "
"of super-villains. To download this data set, download and save this "
"file:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:35
msgid "http://ProgramArcadeGames.com/chapters/16_searching/super_villains.txt"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:37
msgid ""
"These are random names generated by the nine.frenchboys.net website, "
"although last I checked they no longer have a super-villain generator."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:40
msgid "Save this file and remember which directory you saved it to."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:42
msgid ""
"In the same directory as ``super_villains.txt``, create, save, and run "
"the following python program:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:53
msgid ""
"There is only one new command in this code: ``open``. Because it is a "
"built-in function like ``print``, there is no need for an ``import``. "
"Full details on this function can be found in the `Python documentation`_"
" but at this point the documentation for that command is so technical it "
"might not even be worth looking at."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:61
msgid ""
"The above program has two problems with it, but it provides a simple "
"example of reading in a file. Line 1 opens a file and gets it ready to be"
" read. The name of the file is in between the quotes. The new variable "
"``file`` is an object that represents the file being read. Line 3 shows "
"how a normal ``for`` loop may be used to read through a file line by "
"line. Think of file as a list of lines, and the new variable line will be"
" set to each of those lines as the program runs through the loop."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:69
msgid ""
"Try running the program. One of the problems with the it is that the text"
" is printed double-spaced. The reason for this is that each line pulled "
"out of the file and stored in the variable line includes the carriage "
"return as part of the string. Remember the carriage return and line feed "
"introduced back in Chapter 1? The ``print`` statement adds yet another "
"carriage return and the result is double-spaced output."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:76
msgid ""
"The second problem is that the file is opened, but not closed. This "
"problem isn't as obvious as the double-spacing issue, but it is "
"important. The Windows operating system can only open so many files at "
"once. A file can normally only be opened by one program at a time. "
"Leaving a file open will limit what other programs can do with the file "
"and take up system resources. It is necessary to close the file to let "
"Windows know the program is no longer working with that file. In this "
"case it is not too important because once any program is done running, "
"the Windows will automatically close any files left open. But since it is"
" a bad habit to program like that, let's update the code:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:97
msgid ""
"The listing above works better. It has two new additions. On line 4 is a "
"call to the ``strip`` method built into every ``String`` class. This "
"function returns a new string without the trailing spaces and carriage "
"returns of the original string. The method does not alter the original "
"string but instead creates a new one. This line of code would not work:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:107
msgid ""
"If the programmer wants the original variable to reference the new "
"string, she must assign it to the new returned string as shown on line 4."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:110
msgid ""
"The second addition is on line 7. This closes the file so that the "
"operating system doesn't have to go around later and clean up open files "
"after the program ends."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:115
msgid "Reading Into an Array"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:117
msgid ""
"It is useful to read in the contents of a file to an array so that the "
"program can do processing on it later. This can easily be done in python "
"with the following code:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:122
msgid "Read in a file from disk and put it in an array"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:136
msgid ""
"This combines the new pattern of how to read a file, along with the "
"previously learned pattern of how to create an empty array and append to "
"it as new data comes in, which was shown back in Chapter 7. To verify the"
" file was read into the array correctly a programmer could print the "
"length of the array:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:145
msgid "Or the programmer could bring the entire contents of the array:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:152
msgid ""
"Go ahead and make sure you can read in the file before continuing on to "
"the different searches."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:156
msgid "Linear Search"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:158
msgid ""
"If a program has a set of data in an array, how can it go about finding "
"where a specific element is? This can be done one of two ways. The first "
"method is to use a *linear search*. This starts at the first element, and"
" keeps comparing elements until it finds the desired element (or runs out"
" of elements.)"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:164
msgid "Linear Search Algorithm"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:170
msgid "Linear search"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:186
msgid ""
"The linear search is rather simple. Line 4 sets up an increment variable "
"that will keep track of exactly where in the list the program needs to "
"check next. The first element that needs to be checked is zero, so ``i`` "
"is set to zero."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:190
msgid ""
"The next line is a bit more complex. The computer needs to keep looping "
"until one of two things happens. It finds the element, or it runs out of "
"elements. The first comparison sees if the current element we are "
"checking is less than the length of the list. If so, we can keep looping."
" The second comparison sees if the current element in the name list is "
"equal to the name we are searching for."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:197
msgid ""
"This check to see if the program has run out of elements *must occur "
"first*. Otherwise the program will check against a non-existent element "
"which will cause an error."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:201
msgid ""
"Line 6 simply moves to the next element if the conditions to keep "
"searching are met in line 5."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:204
msgid ""
"At the end of the loop, the program checks to see if the end of the list "
"was reached on line 8. Remember, a list of n elements is numbered 0 to "
"n-1. Therefore if i is equal to the length of the list, the end has been "
"reached. If it is less, we found the element."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:210
msgid "Variations On The Linear Search"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:214
msgid ""
"(This section needs to be updated to show examples using the text "
"adventure.)"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:217
msgid ""
"Variations on the linear search can be used to create several common "
"algorithms. For example, say we had a list of aliens. We might want to "
"check this group of aliens to see if one of the aliens is green. Or are "
"all the aliens green? Which aliens are green?"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:222
msgid "To begin with, we'd need to define our alien:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:224
msgid "Alien class"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:235
msgid ""
"Then we'd need to create a function to check and see if it has the "
"property that we are looking for. In this case, is it green? We'll assume"
" the color is a text string, and we'll convert it to upper case to "
"eliminate case-sensitivity."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:240
msgid "Alien class has_property method"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:253
msgid "Does At Least One Item Have a Property?"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:255
msgid ""
"Is at least one alien green? We can check. The basic algorithm behind "
"this check:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:258
msgid "Check if list has an item that has a property - while loop"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:276
msgid ""
"This could also be done with a ``for`` loop. In this case, the loop will "
"exit early by using a ``return`` once the item has been found. The code "
"is shorter, but not every programmer would prefer it. Some programmers "
"feel that loops should not be prematurely ended with a ``return`` or "
"``break`` statement. It all goes to personal preference, or the personal "
"preference of the person that is footing the bill."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:283
msgid "Check if list has an item that has a property - for loop"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:296
msgid "Do All Items Have a Property?"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:298
msgid ""
"Are all aliens green? This code is very similar to the prior example. "
"Spot the difference and see if you can figure out the reason behind the "
"change."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:301
msgid "Check if all items have a property"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:313
msgid "Create a List With All Items Matching a Property"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:315
msgid ""
"What if you wanted a list of aliens that are green? This is a combination"
" of our prior code, and the code to append items to a list that we "
"learned about back in Chapter 7."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:319
msgid "Create another list with all items matching a property"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:332
msgid ""
"How would you run all these in a test? The code above can be combined "
"with this code to run:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:335
msgid "Run Sample Functions"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:357
msgid "For a full working example see:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:359
msgid "http://programarcadegames.com/python_examples/show_file.php?file=property_check_examples.py"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:361
msgid ""
"These common algorithms can be used as part of a solution to a larger "
"problem, such as find all the addresses in a list of customers that "
"aren't valid."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:365
msgid "Binary Search"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:371
msgid ""
"A faster way to search a list is possible with the binary search. The "
"process of a binary search can be described by using the classic number "
"guessing game \"guess a number between 1 and 100\" as an example. To make"
" it easier to understand the process, let's modify the game to be \"guess"
" a number between 1 and 128.\" The number range is inclusive, meaning "
"both 1 and 128 are possibilities."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:378
msgid ""
"If a person were to use the linear search as a method to guess the secret"
" number, the game would be rather long and boring."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:395
msgid ""
"Most people will use a binary search to find the number. Here is an "
"example of playing the game using a binary search:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:412
msgid ""
"Each time through the rounds of the number guessing game, the guesser is "
"able to eliminate one half of the problem space by getting a \"high\" or "
"\"low\" as a result of the guess."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:416
msgid ""
"In a binary search, it is necessary to track an upper and a lower bound "
"of the list that the answer can be in. The computer or number-guessing "
"human picks the midpoint of those elements. Revisiting the example:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:420
msgid ""
"A lower bound of 1, upper bound of 128, mid point of "
":math:`\\frac{128+1}{2}=64.5`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:428
msgid ""
"A lower bound of 65, upper bound of 128, mid point of "
":math:`\\frac{65+128}{2}=96.5`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:436
msgid ""
"A lower bound of 65, upper bound of 95, mid point of "
":math:`\\frac{65+95}{2}=80`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:444
msgid ""
"A lower bound of 81, upper bound of 95, mid point of "
":math:`\\frac{81+95}{2}=88`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:452
msgid ""
"A lower bound of 89, upper bound of 95, mid point of "
":math:`\\frac{89+95}{2}=92`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:460
msgid ""
"A lower bound of 93, upper bound of 95, mid point of "
":math:`\\frac{93+95}{2}=94`."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:468
msgid ""
"A binary search requires significantly fewer guesses. Worst case, it can "
"guess a number between 1 and 128 in 7 guesses. One more guess raises the "
"limit to 256. 9 guesses can get a number between 1 and 512. With just 32 "
"guesses, a person can get a number between 1 and 4.2 billion."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:473
msgid ""
"To figure out how large the list can be given a certain number of "
"guesses, the formula works out like :math:`n=x^{g}` where :math:`n` is "
"the size of the list and :math:`g` is the number of guesses. For example:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:477
msgid ":math:`2^7=128` (7 guesses can handle 128 different numbers)"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:478
msgid ":math:`2^8=256`"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:479
msgid ":math:`2^9=512`"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:480
msgid ":math:`2^{32}=4,294,967,296`"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:483
msgid ""
"If you have the problem size, we can figure out the number of guesses "
"using the log function. Specifically, *log base 2*. If you don't specify "
"a base, most people will assume you mean the natural log with a base of "
":math:`e \\approx 2.71828` which is not what we want. For example, using "
"log base 2 to find how many guesses:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:489
msgid ":math:`log_2 128 = 7`"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:490
msgid ":math:`log_2 65,536 = 16`"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:493
msgid ""
"Enough math! Where is the code? The code to do a binary search is more "
"complex than a linear search:"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:496
msgid "Binary search"
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:528
msgid ""
"Since lists start at element zero, line 3 sets the lower bound to zero. "
"Line 4 sets the upper bound to the length of the list minus one. So for a"
" list of 100 elements the lower bound will be 0 and the upper bound 99."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:532
msgid ""
"The Boolean variable on line 5 will be used to let the while loop know "
"that the element has been found."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:535
msgid ""
"Line 8 checks to see if the element has been found or if we've run out of"
" elements. If we've run out of elements the lower bound will end up "
"equaling the upper bound."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:539
msgid ""
"Line 11 finds the middle position. It is possible to get a middle "
"position of something like 64.5. It isn't possible to look up position "
"64.5. (Although J.K. Rowling was rather clever in enough coming up with "
"Platform :math:`9\\frac{3}{4}`, that doesn't work here.) The best way of "
"handling this is to use the ``//`` operator first introduced way back in "
"Chapter 1. This is similar to the ``/`` operator, but will only return "
"integer results. For example, ``11 // 2`` would give 5 as an answer, "
"rather than 5.5."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:547
msgid ""
"Starting at line 17, the program checks to see if the guess is high, low,"
" or correct. If the guess is low, the lower bound is moved up to just "
"past the guess. If the guess is too high, the upper bound is moved just "
"below the guess. If the answer has been found, ``found`` is set to "
"``True`` ending the search."
msgstr ""

#: ../../source/chapters/15_searching/searching.rst:553
msgid ""
"With the a list of 100 elements, a person can reasonably guess that on "
"average with the linear search, a program will have to check 50 of them "
"before finding the element. With the binary search, on average you'll "
"still need to do about seven guesses. In an advanced algorithms course "
"you can find the exact formula. For this course, just assume average and "
"worst cases are the same."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:7
msgid "Array-Backed Grids"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:10
msgid "Introduction"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:16
msgid ""
"Games like minesweeper, tic-tac-toe, and many types of adventure games "
"keep data for the game in a grid of numbers. For example, a tic-tac-toe "
"board:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:27
msgid ""
". . . can use a grid of numbers to represent the empty spots, the O's and"
" the X's like this:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:38
msgid ""
"This grid of numbers can also be called a *two-dimensional* array or a "
"*matrix*. (Finally, we get to learn about The Matrix.) The values of the "
"numbers in the grid represent what should be displayed at each board "
"location. In the prior example, 0 represents a spot where no one has "
"played, a 1 represents an X, and a 2 represents an O."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:46
msgid "Figure 16.1: Minesweeper game, showing the backing grid of numbers"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:48
msgid ""
"The figure above is an example from the classic minesweeper game. This "
"example has been modified to show both the classic display on the left, "
"and the grid of numbers used to display the board on the right."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:52
msgid ""
"The number ``10`` represents a mine, the number ``0`` represents a space "
"that has not been clicked, and the number 9 represents a cleared space. "
"The numbers ``1`` to ``8`` represent how many mines are within the "
"surrounding eight squares, and is only filled in when the user clicks on "
"the square."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:57
msgid ""
"Minesweeper can actually have two grids. One for the regular display, and"
" a completely separate grid of numbers that will track if the user has "
"placed \"flags\" on the board marking where she thinks the mines are."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:61
msgid ""
"Classic adventure game maps are created using a tiled map editor. These "
"are huge grids where each location is simply a number representing the "
"type of terrain that goes there. The terrain could be things like dirt, a"
" road, a path, green grass, brown grass, and so forth. Programs like "
"Tiled_ shown in the figure below allow a developer to easily make these "
"maps and write the grid to disk."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:72
msgid "Figure 16.2: Using Qt Tiles to create an adventure map"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:74
msgid ""
"Adventure games also use multiple grids of numbers, just like minesweeper"
" has a grid for the mines, and a separate grid for the flags. One grid, "
"or \"layer,\" in the adventure game represents terrain you can walk on; "
"another for things you can't walk on like walls and trees; a layer for "
"things that can instantly kill you, like lava or bottomless pits; one for"
" objects that can be picked up and moved around; and yet another layer "
"for initial placement of monsters."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:81
msgid ""
"Maps like these can be loaded in a Python program, but unfortunately a "
"full description of how to manage is beyond the scope of this book. "
"Projects like PyTMX_ that provide some of the code needed to load these "
"maps."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:88
msgid "Application"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:90
msgid ""
"Enough talk, let's write some code. This example will create a grid that "
"will trigger if we display a white or green block. We can change the grid"
" value and make it green by clicking on it. This is a first step to a "
"grid-based game like minesweeper, battleship, connect four, etc. (One "
"year I had a student call me over and she had modified a program like "
"this to show my name in flashing lights. That was . . . disturbing. So "
"please use this knowledge only for good!)"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:98
msgid "Start with this template:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:100
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:257
msgid "array_backed_grid.py"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:105
msgid ""
"Starting with the file above, attempt to recreate this program following "
"the instructions here. The final program is at the end of this chapter "
"but don't skip ahead and copy it! If you do that you'll have learned "
"nothing. Anyone can copy and paste the code, but if you can recreate this"
" program you have skills people are willing to pay for. If you can only "
"copy and paste, you've wasted your time here."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:113
msgid "Drawing the Grid"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:115
msgid ""
"Create variables named ``WIDTH``, ``HEIGHT``, and ``MARGIN``. Set the "
"width and height to 20. This will represent how large each grid location "
"is. Set the margin to 5. This represents the margin between each grid "
"location and the edges of the screen. Create these variables before the "
"main program loop. Also create variables ``ROW_COUNT`` and "
"``COLUMN_COUNT``. Set them to 10. This will control how many rows and "
"columns we will have."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:121
msgid ""
"Calculate ``SCREEN_WIDTH`` and ``SCREEN_HEIGHT`` based on the variables "
"we created above. If we have 10 rows, and each row is 20 high, that's 200"
" pixels. If we have 10 rows, that's also 11 margins. (Nine between the "
"cells and two on each edge.) That is 55 more pixels for a total of 255. "
"Write the equation so it works with whatever we select in the constants "
"created by step 1."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:126
msgid ""
"Draw a white box in the lower-left corner. Draw the box drawn using the "
"height and width variables created earlier. (Feel free to adjust the "
"colors.) Use the `draw_rectangle_filled`_ function. You will need to "
"center the rectangle not at (0, 0) but at a coordinate that takes into "
"account the height and width of the rectangle, such as "
":math:`\\frac{width}{2}`. When you get done your program's window should "
"look like:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:135
msgid "Figure 16.3: Step 3"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:137
msgid ""
"Use a ``for`` loop to draw ``COLUMN_COUNT`` boxes in a row. Use "
"``column`` for the variable name in the ``for`` loop. The output will "
"look like one long box until we add in the margin between boxes. See "
"Figure 16.4."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:143
msgid "Figure 16.4: Step 4"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:145
msgid ""
"Adjust the drawing of the rectangle to add in the ``margin`` variable. "
"Now there should be gaps between the rectangles. See Figure 16.5."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:150
msgid "Figure 16.5: Step 5"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:152
msgid ""
"Add the margin before drawing the rectangles, in addition to between each"
" rectangle. This should keep the box from appearing right next to the "
"window edge. See Figure 16.6. You'll end up with an equation like: "
":math:`(margin+width)\\cdot column+margin+\\frac{margin}{2}`"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:160
msgid "Figure 16.6: Step 6"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:162
msgid ""
"Add another ``for`` loop that also will loop for each row. Call the "
"variable in this ``for`` loop ``row``. Now we should have a full grid of "
"boxes. See Figure 16.7."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:167
msgid "Figure 16.7: Step 7"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:170
msgid "Populating the Grid"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:172
msgid ""
"Now we need to create a two-dimensional array. Creating a two-dimensional"
" array in Python is, unfortunately, not as easy as it is in some other "
"computer languages. There are some libraries that can be downloaded for "
"Python that make it easy, but for this example they will not be used. To "
"create a two-dimensional array and set an example, use the code below:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:178
#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:197
msgid "Create a 10x10 array of numbers"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:194
msgid ""
"A much shorter example is below, but this example uses some odd parts of "
"Python that I don't bother to explain in this book:"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:202
msgid ""
"Use one of these two examples and place the code to create our array "
"ahead of your main program loop."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:205
msgid "Set an example location in the array to 1."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:207
msgid ""
"Two dimensional arrays are usually represented addressed by first their "
"row, and then the column. This is called a row-major storage. Most "
"languages use row-major storage, with the exception of Fortran and "
"MATLAB. Fortran and MATLAB use column-major storage."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:217
msgid "Place this code somewhere ahead of your main program loop."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:219
msgid ""
"Select the color of the rectangle based on the value of a variable named "
"``color``. Do this by first finding the line of code where the rectangle "
"is drawn. Ahead of it, create a variable named ``color`` and set it equal"
" to white. Then replace the white color in the rectangle declaration with"
" the ``color`` variable."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:225
msgid ""
"Select the color based on the value in the grid. After setting color to "
"white, place an if statement that looks at the value in "
"``grid[row][column]`` and changes the color to green if the grid value is"
" equal to 1. There should now be one green square. See Figure 16.8."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:232
msgid "Figure 16.8: Step 11"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:234
msgid ""
"Print \"click\" to the screen if the user clicks the mouse button. See "
":ref:`mouse-click` if you've forgotten how to do that."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:236
msgid "Print the mouse coordinates when the user clicks the mouse."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:237
msgid ""
"Convert the mouse coordinates into grid coordinates. Print those instead."
" Remember to use the width and height of each grid location combined with"
" the margin. It will be necessary to convert the final value to an "
"integer. This can be done by using int or by using the integer division "
"operator ``//`` instead of the normal division operator ``/``. See Figure"
" 16.9."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:246
msgid "Figure 16.9: Step 14"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:248
msgid "Set the grid location at the row/column clicked to 1. See Figure 16.10."
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:252
msgid "Figure 16.10: Step 15"
msgstr ""

#: ../../source/chapters/16_array_backed_grids/array_backed_grids.rst:255
msgid "Final Program"
msgstr ""

#: ../../source/chapters/17_platformers/platformers.rst:7
msgid "Platformers"
msgstr ""

#: ../../source/chapters/17_platformers/platformers.rst:9
msgid "map.csv"
msgstr ""

#: ../../source/chapters/17_platformers/platformers.rst:15
msgid "sprite_tiled_map.py"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:6
msgid "Sorting"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:8
msgid ""
"Binary searches only work on lists that are in order. So how do programs "
"get a list in order? How does a program sort a list of items when the "
"user clicks a column heading, or otherwise needs something sorted?"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:12
msgid ""
"There are several algorithms that do this. The two easiest algorithms for"
" sorting are the *selection sort* and the *insertion sort*. Other sorting"
" algorithms exist as well, such as the shell, merge, heap, and quick "
"sorts."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:16
msgid ""
"The best way to get an idea on how these sorts work is to watch them. To "
"see common sorting algorithms in action visit this excellent website:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:19
msgid "http://www.sorting-algorithms.com"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:21
msgid ""
"Each sort has advantages and disadvantages. Some sort a list quickly if "
"the list is almost in order to begin with. Some sort a list quickly if "
"the list is in a completely random order. Other lists sort fast, but take"
" more memory. Understanding how sorts work is important in selecting the "
"proper sort for your program."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:28
msgid "Swapping Values"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:34
msgid ""
"Before learning to sort, we need to learn how to swap values between two "
"variables. This is a common operation in many sorting algorithms. Suppose"
" a program has a list that looks like the following:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:42
msgid ""
"The developer wants to swap positions 0 and 2, which contain the numbers "
"15 and 14 respectively. See Figure 18.1."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:47
msgid "Figure 18.1: Swapping values in an array"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:49
msgid "A first attempt at writing this code might look something like this:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:58
msgid "Figure 18.2: Incorrect attempt to swap array values"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:60
msgid ""
"See Figure 18.2 to get an idea on what would happen. This clearly does "
"not work. The first assignment ``list[0] = list[2]`` causes the value 15 "
"that exists in position 0 to be overwritten with the 14 in position 2 and"
" irretrievably lost. The next line with ``list[2] = list[0]`` just copies"
" the 14 back to cell 2 which already has a 14."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:66
msgid ""
"To fix this problem, swapping values in an array should be done in three "
"steps. It is necessary to create a temporary variable to hold a value "
"during the swap operation. See Figure 18.3. The code to do the swap looks"
" like the following:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:71
msgid "Swapping two values in an array"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:78
msgid ""
"The first line copies the value of position 0 into the ``temp`` variable."
" This allows the code to write over position 0 with the value in position"
" 2 without data being lost. The final line takes the old value of "
"position 0, currently held in the ``temp`` variable, and places it in "
"position 2."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:85
msgid "Figure 18.3: Correct method to swap array values"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:88
msgid "Selection Sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:94
msgid ""
"The selection by looking at element 0. Then code next scans the rest of "
"the list from element 1 to n-1 to find the smallest number. The smallest "
"number is swapped into element 0. The code then moves on to element 1, "
"then 2, and so forth. Graphically, the sort looks like Figure 18.4."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:101
msgid "Figure 18.4: Selection Sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:103
msgid ""
"The code for a selection sort involves two nested loops. The outside loop"
" tracks the current position that the code wants to swap the smallest "
"value into. The inside loop starts at the current location and scans to "
"the right in search of the smallest value. When it finds the smallest "
"value, the swap takes place."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:109
msgid "Selection sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:136
msgid ""
"The outside loop will always run  times. The inside loop will run "
":math:`\\frac{n}{2}` times. This will be the case regardless if the list "
"is in order or not. The loops' efficiency may be improved by checking if "
"``min_pos`` and ``cur_pos`` are equal before line 20. If those variables "
"are equal, there is no need to do the three lines of swap code."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:143
msgid ""
"In order to test the selection sort code above, the following code may be"
" used. The first function will print out the list. The next code will "
"create a list of random numbers, print it, sort it, and then print it "
"again. On line 5 the print statement right-aligns the numbers to make the"
" column of numbers easier to read. Formatting ``print`` statements will "
"be covered in a later chapter."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:150
msgid "Code to create and print list to sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:171
msgid "See an animation of the selection sort at:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:173
msgid "http://www.sorting-algorithms.com/selection-sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:175
msgid ""
"For a truly unique visualization of the selection sort, search YouTube "
"for \"selection sort dance\" or use this link:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:178
msgid "http://youtu.be/Ns4TPTC8whw"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:180
msgid ""
"You also can trace through the code using `Selection Sort on Python "
"Tutor`_."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:185
msgid "Insertion Sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:191
msgid ""
"The insertion sort is similar to the selection sort in how the outer loop"
" works. The insertion sort starts at the left side of the array and works"
" to the right side. The difference is that the insertion sort does not "
"select the smallest element and put it into place; the insertion sort "
"selects the next element to the right of what was already sorted. Then it"
" slides up each larger element until it gets to the correct location to "
"insert. Graphically, it looks like Figure 18.5."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:201
msgid "Figure 18.5: Insertion Sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:203
msgid ""
"The insertion sort breaks the list into two sections, the \"sorted\" half"
" and the \"unsorted\" half. In each round of the outside loop, the "
"algorithm will grab the next unsorted element and insert it into the "
"list."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:207
msgid ""
"In the code below, the ``key_pos`` marks the boundary between the sorted "
"and unsorted portions of the list. The algorithm scans to the left of "
"``key_pos`` using the variable ``scan_pos``. Note that in the insertion "
"sort, ``scan_pos`` goes down to the left, rather than up to the right. "
"Each cell location that is larger than ``key_value`` gets moved up (to "
"the right) one location."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:213
msgid ""
"When the loop finds a location smaller than ``key_value``, it stops and "
"puts ``key_value`` to the left of it."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:216
msgid ""
"The outside loop with an insertion sort will run *n* times. The inside "
"loop will run an average of :math:`\\frac{n}{4}` times if the loop is "
"randomly shuffled."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:220
msgid ""
"What's really important: If the loop is close to a sorted loop already, "
"then the inside loop does not run very much, and the sort time is closer "
"to *n*. The insertion sort is the fastest sort for nearly-sorted lists. "
"If the list is reversted, then the insertion sort is terrible."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:226
msgid ""
"The selection sort doesn't really care what order the list is in to begin"
" with. It performs the same regardless."
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:229
msgid "Insertion sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:257
msgid "See an animation of the insertion sort at:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:259
msgid "http://www.sorting-algorithms.com/insertion-sort"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:261
msgid ""
"For another dance interpretation, search YouTube for \"insertion sort "
"dance\" or use this link:"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:264
msgid "http://youtu.be/ROalU379l3U"
msgstr ""

#: ../../source/chapters/18_sorting/sorting.rst:266
msgid "You can trace through the code using `Insertion Sort on Python Tutor`_."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:5
msgid "Exceptions"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:11
msgid ""
"When something goes wrong with your program, do you want to keep the user"
" from seeing a red Python error message? Do you want to keep your program"
" from hanging? If so, then you need *exceptions*."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:15
msgid ""
"Exceptions are used to handle abnormal conditions that can occur during "
"the execution of code. Exceptions are often used with file and network "
"operations. This allows code to gracefully handle running out of disk "
"space, network errors, or permission errors."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:21
msgid "Vocabulary"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:23
msgid ""
"There are several terms and phrases used while working with exceptions. "
"Here are the most common:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:26
msgid ""
"**Exception**: This term could mean one of two things. First, the "
"condition that results in abnormal program flow. Or it could be used to "
"refer to an object that represents the data condition. Each exception has"
" an object that holds information about it."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:30
msgid ""
"**Exception handling**: The process of handling an exception to normal "
"program flow."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:32
msgid ""
"**Catch block or exception block**: Code that handles an abnormal "
"condition is said to \"catch\" the exception."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:34
msgid ""
"**Throw or raise**: When an abnormal condition to the program flow has "
"been detected, an instance of an exception object is created. It is then "
"\"thrown\" or \"raised\" to code that will catch it."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:37
msgid ""
"**Unhandled exception or Uncaught exception**: An exception that is "
"thrown, but never caught. This usually results in an error and the "
"program ending or crashing."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:40
msgid "**Try block**: A set of code that might have an exception thrown in it."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:42
msgid ""
"Most programming languages use the terms \"throw\" and \"catch.\" "
"Unfortunately Python doesn't. Python uses \"raise\" and \"exception.\" We"
" introduce the throw/catch vocabulary here because they are the most "
"prevalent terms in the industry."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:48
msgid "Exception Handling"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:50
msgid "The code for handling exceptions is simple. See the example below:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:52
msgid "Handling division by zero"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:62
msgid ""
"On line two is the ``try`` statement. Every indented line below it is "
"part of the \"try block.\" There may be no unindented code below the "
"``try`` block that doesn't start with an ``except`` statement. The "
"``try`` statement defines a section of code that the code will attempt to"
" execute."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:67
msgid ""
"If there is any exception that occurs during the processing of the code "
"the execution will immediately jump to the \"catch block.\" That block of"
" code is indented under the ``except`` statement on line 4. This code is "
"responsible for handling the error."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:72
msgid ""
"A program may use exceptions to catch errors that occur during a "
"conversion from text to a number. For example:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:75
msgid "Handling number conversion errors"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:85
msgid ""
"An exception will be thrown on line 3 because \"fred\" can not be "
"converted to an integer. The code on line 5 will print out an error "
"message."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:88
msgid ""
"Below is an expanded version on this example. It error-checks a user's "
"input to make sure an integer is entered. If the user doesn't enter an "
"integer, the program will keep asking for one. The code uses exception "
"handling to capture a possible conversion error that can occur on line 5."
" If the user enters something other than an integer, an exception is "
"thrown when the conversion to a number occurs on line 5. The code on line"
" 6 that sets ``number_entered`` to ``True`` will not be run if there is "
"an exception on line 5."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:96
msgid "Better handling of number conversion errors"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:109
msgid ""
"Files are particularly prone to errors during operations with them. A "
"disk could fill up, a user could delete a file while it is being written,"
" it could be moved, or a USB drive could be pulled out mid-operation. "
"These types of errors may also be easily captured by using exception "
"handling."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:114
msgid "Checking for an error when opening a file"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:124
msgid ""
"Multiple types of errors may be captured and processed differently. It "
"can be useful to provide a more exact error message to the user than a "
"simple \"an error has occurred.\""
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:128
msgid ""
"In the code below, different types of errors can occur from lines 3-6. By"
" placing ``IOError`` after ``except`` on line 7, only errors regarding "
"Input and Output (IO) will be handled by that code. Likewise line 9 only "
"handles errors around converting values, and line 11 covers division by "
"zero errors. The last exception handling occurs on line 13. Since line 13"
" does not include a particular type of error, it will handle any error "
"not covered by the ``except`` blocks above. The \"catch-all\" ``except`` "
"must always be last."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:136
msgid "Handling different types of errors"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:155
msgid "A list of built-in exceptions is available from this web address:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:157
msgid "http://docs.python.org/library/exceptions.html"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:160
msgid "Example: Saving High Score"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:162
msgid ""
"This shows how to save a high score between games. The score is stored in"
" a file called ``high_score.txt``."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:164
msgid "high_score.py"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:236
msgid "Exception Objects"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:238
msgid ""
"More information about an error can be pulled from the *exception "
"object*. This object can be retrieved while catching an error using the "
"``as`` keyword. For example:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:242
#: ../../source/chapters/19_exceptions/exceptions.rst:261
msgid "Creating an exception"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:251
msgid ""
"The ``e`` variable points to more information about the exception that "
"can be printed out. More can be done with exceptions objects, but "
"unfortunately that is beyond the scope of this chapter. Check the Python "
"documentation on-line for more information about the exception object."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:257
msgid "Exception Generating"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:259
msgid "Exceptions may be generated with the ``raise`` command. For example:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:273
msgid ""
"Try taking the code above, and add exception handling for the ``IOError``"
" raised."
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:275
msgid ""
"It is also possible to create custom exceptions, but that is also beyond "
"the scope of this book. Curious readers may learn more by going to:"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:278
msgid "http://docs.python.org/tutorial/errors.html#raising-exceptions"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:281
msgid "Proper Exception Use"
msgstr ""

#: ../../source/chapters/19_exceptions/exceptions.rst:282
msgid ""
"Exceptions should not be used when ``if`` statements can just as easily "
"handle the condition. Normal code should not raise exceptions when "
"running the \"happy path\" scenario. Well-constructed try/catch code is "
"easy to follow but code involving many exceptions and jumps in code to "
"different handlers can be a nightmare to debug. (Once I was assigned the "
"task of debugging code that read an XML document. It generated dozens of "
"exceptions for each line of the file it read. It was incredibly slow and "
"error-prone. That code should have never generated a single exception in "
"the normal course of reading a file.)"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:5
#: ../../source/chapters/20_recursion/recursion.rst:83
msgid "Recursion"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:17
msgid "(Source: http://everything2.com/title/recursion)"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:19
msgid ""
"Recursion is an object or process that is defined in terms of itself. "
"Mathematical patterns such as factorials and the Fibonacci series are "
"recursive. Documents that can contain other documents, which themselves "
"can contain other documents, are recursive. Fractal images, and even "
"certain biological processes are recursive in how they work."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:26
msgid "Where is Recursion Used?"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:28
msgid ""
"Documents, such as web pages, are naturally recursive. For example, "
"Figure 20.1 shows a simple web document."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:33
msgid "Figure 20.1: Web page"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:35
msgid ""
"That web document can be contained in a \"box,\" which can help layout "
"the page as shown in Figure 20.2."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:40
msgid "Figure 20.2: Web page with tables"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:42
msgid ""
"This works recursively. Each box can contain a web page, that can have a "
"box, which could contain another web page as shown in Figure 20.3."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:46
msgid "Figure 20.3: Web page with recursion"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:48
msgid ""
"Recursive functions are often used with advanced searching and sorting "
"algorithms. We'll show some of that here and if you take a \"data "
"structures\" class you will see a lot more of it."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:52
msgid ""
"Even if a person does not become a programmer, understanding the concept "
"of recursive systems is important. If there is a business need for "
"recursive table structures, documents, or something else, it is important"
" to know how to specify this to the programmer up front."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:57
msgid ""
"For example, a person might specify that a web program for recipes needs "
"the ability to support ingredients and directions. A person familiar with"
" recursion might state that each ingredient could itself be a recipes "
"with other ingredients (that could be recipes.) The second system is "
"considerably more powerful."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:64
msgid "How is Recursion Coded?"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:66
msgid ""
"In prior chapters, we have used functions that call other functions. For "
"example:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:68
msgid "Functions calling other functions"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:81
msgid ""
"It is also possible for a function to call itself. A function that calls "
"itself is using a concept called recursion. For example:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:93
msgid ""
"The example above will print Hello and then call the ``f()`` function "
"again. Which will cause another Hello to be printed out and another call "
"to the ``f()`` function. This will continue until the computer runs out "
"of something called stack space. When this happens, Python will output a "
"long error that ends with:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:99
msgid "``RuntimeError: maximum recursion depth exceeded``"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:101
msgid ""
"The computer is telling you, the programmer, that you have gone too far "
"down the rabbit hole."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:105
msgid "Controlling Recursion Depth"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:107
msgid ""
"To successfully use recursion, there needs to be a way to prevent the "
"function from endlessly calling itself over and over again. The example "
"below counts how many times it has been called, and uses an if statement "
"to exit once the function has called itself ten times."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:112
msgid "Controlling recursion levels"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:144
msgid "Recursion Factorial Calculation"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:146
msgid ""
"Any code that can be done recursively can be done without using "
"recursion. Some programmers feel that the recursive code is easier to "
"understand."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:150
msgid ""
"Calculating the factorial of a number is a classic example of using "
"recursion. Factorials are useful in probability and statistics. For "
"example:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:153
msgid "Recursively, this can be described as:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:155
msgid ""
"Below are two example functions that calculate . The first one is non-"
"recursive, the second is recursive."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:157
msgid "Non-recursive factorial"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:169
msgid "Recursive factorial"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:181
msgid ""
"The functions do nothing by themselves. Below is an example where we put "
"it all together. This example also adds some print statements inside the "
"function so we can see what is happening."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:183
msgid "Trying out recursive functions"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:244
msgid "Recursive Rectangles"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:246
msgid ""
"Recursion is great to work with structured documents that are themselves "
"recursive. For example, a web document can have a table divided into rows"
" and columns to help with layout. One row might be the header, another "
"row the main body, and finally the footer. Inside a table cell, might be "
"another table. And inside of that can exist yet another table."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:248
msgid ""
"Another example is e-mail. It is possible to attach another person's "
"e-mail to a your own e-mail. But that e-mail could have another e-mail "
"attached to it, and so on."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:250
#, python-format
msgid ""
"Can we visually see recursion in action in one of our Pygame programs? "
"Yes! Figure 19.4 shows an example program that draws a rectangle, and "
"recursively keeps drawing rectangles inside of it. Each rectangle is 20% "
"smaller than the parent rectangle. Look at the code. Pay close attention "
"to the recursive call in the recursive_draw function."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:254
msgid "Figure 20.4: Recursive Rectangles"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:256
msgid "recursive_rectangles.py"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:263
msgid "Fractals"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:265
msgid ""
"Fractals are defined recursively. Here is a very simple fractal, showing "
"how it changes depending on how \"deep\" the recursion goes."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:270
msgid "Figure 20.5: Recursive Fractal Level 0"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:274
msgid "Figure 20.6: Recursive Fractal Level 1"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:278
msgid "Figure 20.7: Recursive Fractal Level 2"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:282
msgid "Figure 20.8: Recursive Fractal Level 5"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:284
msgid "Here is the source code for the \"H\" fractal:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:286
msgid "recursive_h.py"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:291
msgid "You can explore fractals on-line:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:293
msgid "https://www.chromeexperiments.com/fractal"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:294
msgid "http://usefuljs.net/fractals/"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:295
msgid "http://hirnsohle.de/test/fractalLab/"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:297
msgid ""
"If you want to program your own fractals, you can get ideas of easy "
"fractals by looking at Chapter 8 of `The Nature of Code`_ by Daniel "
"Shiffman."
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:304
msgid "Recursive Binary Search"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:306
msgid ""
"Recursion can be also be used to perform a binary search. Here is a non-"
"recursive binary search from Chapter 15:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:308
msgid "Non-recursive binary search"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:332
msgid "This same binary search written in a recursive manner:"
msgstr ""

#: ../../source/chapters/20_recursion/recursion.rst:334
msgid "Recursive binary search"
msgstr ""

#: ../../source/chapters/21_print_formatting/print_formatting.rst:5
msgid "Print Formatting"
msgstr ""

#: ../../source/chapters/index.rst:2
msgid "Chapters"
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:2
msgid "Appendix: Selecting Python"
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:4
msgid ""
"Our school computers have three different copies of Python installed. We "
"need to select the correct Python to run. This is how you do it."
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:7
msgid "Select File...Settings from the menu:"
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:11
msgid ""
"Next, select \"Project Interpreter\" from the left side. Then select the "
"gear icon on the right side, which will pop down a menu. Select \"Add "
"Local.\""
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:17
msgid ""
"Then browse to the Python interpreter that we want. See the path below. "
"If you are lucky, it might automatically select the interpreter for you."
msgstr ""

#: ../../source/chapters/xx_selecting_python/selecting_python.rst:22
msgid ""
"After you do this, the \"run\" option won't be available for a little "
"while. The computer will be reindexing all the commands. You can see this"
" on the bar at the bottom. When it is done, you should be able to run "
"your programs."
msgstr ""

